{"version":3,"sources":["actions/types.js","actions/profile.js","components/CSRFToken.js","positive.jpg","containers/Login.js","actions/auth.js","containers/Register.js","containers/Home.js","components/Navbar.js","hocs/Layout.js","reducers/auth.js","reducers/profile.js","reducers/index.js","store.js","containers/ForbiddenMessage.js","containers/Dashboard.js","containers/ButtonCard.js","containers/sample.js","containers/AdminDasboard.js","containers/Features.js","containers/PosFeatures.js","negative.jpg","containers/NegFeatures.js","neutral.jpg","containers/NeuFeatures.js","containers/SentimentCount.js","containers/DeceptiveCount.js","containers/TSentimentCount.js","containers/TDeceptiveCount.js","t_positive.jpg","containers/TPosFeatures.js","t_neutral.jpg","containers/TNeuFeatures.js","t_negative.jpg","containers/TNegFeatures.js","containers/NBDAccuracy.js","containers/SVMDAccuracy.js","containers/RFDAccuracy.js","containers/AccuracyComparison.js","containers/UserReviews.js","containers/AccuracyMetrices.js","containers/UserReviewAnalysis.js","App.js","index.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","LOGOUT_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","LOAD_USER_PROFILE_SUCCESS","LOAD_USER_PROFILE_FAIL","SEND_DATA_FAIL","GET_FEATURES_FAIL","GET_FEATURES_COUNT_SUCCESS","GET_FEATURES_COUNT_FAIL","GET_DECEPTIVE_COUNT_SUCCESS","GET_DECEPTIVE_COUNT_FAIL","GET_ACTUAL_FEATURES_FAIL","GET_T_SENTIMENT_COUNT_SUCCESS","GET_T_SENTIMENT_COUNT_FAIL","GET_T_DECEPTIVE_COUNT_SUCCESS","GET_T_DECEPTIVE_COUNT_FAIL","GET_NBD_ACCURACY_SUCCESS","GET_NBD_ACCURACY_FAIL","GET_RFD_ACCURACY_SUCCESS","GET_RFD_ACCURACY_FAIL","GET_SVMD_ACCURACY_SUCCESS","GET_SVMD_ACCURACY_FAIL","GET_DECEPTIVE_ACCURACIES_SUCCESS","GET_DECEPTIVE_ACCURACIES_FAIL","GET_USERS_SUCCESS","GET_USERS_FAIL","GET_DATA_COUNTS_SUCCESS","GET_DATA_COUNTS_FAIL","load_user","dispatch","a","config","headers","axios","get","process","response","data","error","type","payload","get_sentiment_count","Cookies","body","JSON","stringify","console","log","post","success","get_deceptive_count","get_t_features","file_name","window","location","reload","get_t_sentiment_count","get_t_deceptive_count","get_nbd_accuracy","get_rfd_accuracy","get_svmd_accuracy","get_deceptive_accuracies","get_users","get_data_counts","CSRFToken","useState","csrftoken","setcsrftoken","useEffect","fetchData","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","value","connect","state","isAuthenticated","auth","is_admin","login","email","password","formData","setFormData","onChange","e","target","to","className","onSubmit","preventDefault","id","placeholder","required","minLength","register","re_password","setformData","accountCreated","setaccountCreated","Home","exact","logout","adminAuthLinks","class","onClick","href","authLinks","guestLinks","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","checkAuthenticated","err","children","initialState","positive","neutral","negative","fake","genuine","t_positive","t_neutral","t_negative","t_fake","t_genuine","nbd_training_accuracy","nbd_testing_accuracy","rfd_training_accuracy","rfd_testing_accuracy","svmd_training_accuracy","svmd_testing_accuracy","users","training_positive_count","training_neutral_count","training_negative_count","training_fake_count","training_genuine_count","training_count","testing_count","users_positive_count","users_neutral_count","users_negative_count","users_fake_count","users_genuine_count","combineReducers","action","profile","accuracies","nbd","rfd","svmd","counts","training","users_data","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ForbiddenMessage","send_data","review","Email","disabled","for","rows","ButtonCard","props","Name","bgColor","count","iconColor","iconName","text","Sample","get_features","posSuccess","setposSuccess","negSuccess","setnegSuccess","neuSuccess","setneuSuccess","sentimentCount","setSentimentCount","deceptiveCount","setDeceptiveCount","Features","headingText","src","imageSrc","Date","now","image","labels","datasets","label","backgroundColor","hoverOffset","width","height","options","maintainAspectRatio","plugins","title","display","font","size","padding","bottom","position","legend","training_accuracy","testing_accuracy","users_reviews","pageNumber","setPageNumber","pageVisited","displayUsers","slice","map","user","index","scope","filtered_review","deceptive","sentiment","last_updated","pageCount","Math","ceil","previousLabel","nextLabel","onPageChange","selected","containerClassName","previousClassName","nextClassName","disabledClassName","activeClassName","nbdAccuracy","setNbdAccuracy","rfdAccuracy","setRfdAccuracy","svmdAccuracy","setSvmdAccuracy","deceptiveAccuracies","setDeceptiveAccuracies","tPosSuccess","setTPosSuccess","tNeuSuccess","setTNeuSuccess","tNegSuccess","setTNegSuccess","tSentimentCount","setTSentimentCount","tDeceptiveCount","setTDeceptiveCount","setUsers","App","path","component","Login","Register","Dashboard","AdminDashboard","PosFeatures","NeuFeatures","NegFeatures","SentimentCount","DeceptiveCount","TPosFeatures","TNeuFeatures","TNegFeatures","TSentimentCount","TDeceptiveCount","NBDAccuracy","RFDAccuracy","SVMDAccuracy","AccuracyComparison","UserReviews","AccuracyMetrices","UserReviewAnalysis","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0cc6d022.chunk.js","sourcesContent":["// Authentication States\r\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\nexport const LOGOUT_FAIL = 'LOGOUT_FAIL';\r\nexport const AUTHENTICATED_SUCCESS = 'AUTHENTICATED_SUCCESS';\r\nexport const AUTHENTICATED_FAIL = 'AUTHENTICATED_FAIL';\r\n\r\n// Profile Dispatch States\r\nexport const LOAD_USER_PROFILE_SUCCESS = 'LOAD_USER_PROFILE_SUCCESS';\r\nexport const LOAD_USER_PROFILE_FAIL = 'LOAD_USER_PROFILE_FAIL';\r\nexport const SEND_DATA_SUCCESS = 'SEND_DATA_SUCCESS';\r\nexport const SEND_DATA_FAIL = 'SEND_DATA_FAIL';\r\n\r\nexport const GET_FEATURES_SUCCESS = 'GET_FEATURES_SUCCESS';\r\nexport const GET_FEATURES_FAIL = 'GET_FEATURES_FAIL';\r\n\r\nexport const GET_FEATURES_COUNT_SUCCESS = 'GET_FEATURES_COUNT_SUCCESS';\r\nexport const GET_FEATURES_COUNT_FAIL = 'GET_FEATURES_COUNT_FAIL';\r\n\r\nexport const GET_DECEPTIVE_COUNT_SUCCESS = 'GET_DECEPTIVE_COUNT_SUCCESS';\r\nexport const GET_DECEPTIVE_COUNT_FAIL = 'GET_DECEPTIVE_COUNT_FAIL';\r\n\r\nexport const GET_ACTUAL_FEATURES_SUCCESS = 'GET_ACTUAL_FEATURES_SUCCESS';\r\nexport const GET_ACTUAL_FEATURES_FAIL = 'GET_ACTUAL_FEATURES_FAIL';\r\n\r\nexport const GET_T_SENTIMENT_COUNT_SUCCESS = 'GET_T_SENTIMENT_COUNT_SUCCESS';\r\nexport const GET_T_SENTIMENT_COUNT_FAIL = 'GET_T_SENTIMENT_COUNT_FAIL';\r\n\r\nexport const GET_T_DECEPTIVE_COUNT_SUCCESS = 'GET_T_DECEPTIVE_COUNT_SUCCESS';\r\nexport const GET_T_DECEPTIVE_COUNT_FAIL = 'GET_T_DECEPTIVE_COUNT_FAIL';\r\n\r\nexport const GET_NBD_ACCURACY_SUCCESS = 'GET_NBD_ACCURACY_SUCCESS';\r\nexport const GET_NBD_ACCURACY_FAIL = 'GET_NBD_ACCURACY_FAIL';\r\n\r\nexport const GET_RFD_ACCURACY_SUCCESS = 'GET_RFD_ACCURACY_SUCCESS';\r\nexport const GET_RFD_ACCURACY_FAIL = 'GET_RFD_ACCURACY_FAIL';\r\n\r\nexport const GET_SVMD_ACCURACY_SUCCESS = 'GET_SVMD_ACCURACY_SUCCESS';\r\nexport const GET_SVMD_ACCURACY_FAIL = 'GET_SVMD_ACCURACY_FAIL';\r\n\r\nexport const GET_DECEPTIVE_ACCURACIES_SUCCESS = 'GET_DECEPTIVE_ACCURACIES_SUCCESS';\r\nexport const GET_DECEPTIVE_ACCURACIES_FAIL = 'GET_DECEPTIVE_ACCURACIES_FAIL';\r\n\r\nexport const GET_USERS_SUCCESS = 'GET_USERS_SUCCESS';\r\nexport const GET_USERS_FAIL = 'GET_USERS_FAIL';\r\n\r\nexport const GET_DATA_COUNTS_SUCCESS = 'GET_DATA_COUNTS_SUCCESS';\r\nexport const GET_DATA_COUNTS_FAIL = 'GET_DATA_COUNTS_FAIL';","import Cookies from 'js-cookie';\r\nimport axios from 'axios';\r\nimport { LOAD_USER_PROFILE_SUCCESS, LOAD_USER_PROFILE_FAIL,\r\n         SEND_DATA_SUCCESS, SEND_DATA_FAIL,\r\n         GET_FEATURES_SUCCESS, GET_FEATURES_FAIL,\r\n         GET_FEATURES_COUNT_SUCCESS, GET_FEATURES_COUNT_FAIL,\r\n         GET_DECEPTIVE_COUNT_SUCCESS, GET_DECEPTIVE_COUNT_FAIL,\r\n         GET_T_SENTIMENT_COUNT_SUCCESS, GET_T_SENTIMENT_COUNT_FAIL,\r\n         GET_T_DECEPTIVE_COUNT_SUCCESS, GET_T_DECEPTIVE_COUNT_FAIL,\r\n         GET_ACTUAL_FEATURES_SUCCESS, GET_ACTUAL_FEATURES_FAIL,\r\n         GET_NBD_ACCURACY_SUCCESS, GET_NBD_ACCURACY_FAIL,\r\n         GET_RFD_ACCURACY_SUCCESS, GET_RFD_ACCURACY_FAIL,\r\n         GET_SVMD_ACCURACY_SUCCESS, GET_SVMD_ACCURACY_FAIL,\r\n         GET_DECEPTIVE_ACCURACIES_SUCCESS, GET_DECEPTIVE_ACCURACIES_FAIL, \r\n         GET_USERS_SUCCESS, GET_USERS_FAIL, GET_DATA_COUNTS_SUCCESS, GET_DATA_COUNTS_FAIL\r\n} from './types';\r\n\r\nexport const load_user = () => async dispatch => {\r\n    const config = {\r\n        headers : {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    try {\r\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/accounts/user`, config);\r\n\r\n        if(response.data.error)\r\n        {\r\n            dispatch({\r\n                type:  LOAD_USER_PROFILE_FAIL\r\n            });\r\n        }\r\n        else {\r\n            dispatch({\r\n                type: LOAD_USER_PROFILE_SUCCESS,\r\n                payload: response.data\r\n            });\r\n        }\r\n    } catch (err) {\r\n        dispatch({\r\n            type:  LOAD_USER_PROFILE_FAIL\r\n        })\r\n    }\r\n}\r\n\r\nexport const send_data = (email, review) => async dispatch => {\r\n\r\n    const config = {\r\n        headers : {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken':  Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({'withCredentials':true, email, review });\r\n\r\n    console.log(body);\r\n    try {\r\n        const response = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/update_user`, body, config);\r\n        console.log(response);\r\n\r\n        if(response.data.success)\r\n        {\r\n            dispatch({\r\n                type: SEND_DATA_SUCCESS\r\n            });\r\n            // console.log('a');\r\n            // return <Redirect to='/login' />;\r\n        }\r\n        else {\r\n            \r\n            dispatch({\r\n                type: SEND_DATA_FAIL\r\n            });\r\n        }\r\n\r\n    } catch (err) {\r\n\r\n        dispatch({\r\n            type: SEND_DATA_FAIL\r\n        });\r\n    }\r\n};\r\n\r\nexport const get_features = (file_name) => async dispatch => {\r\n\r\n    const config = {\r\n        headers : {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken':  Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({'withCredentials':true, \"file_name\": file_name });\r\n\r\n    console.log(body);\r\n    try {\r\n        const response = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/training_features`, body, config);\r\n        // console.log(response);\r\n        window.location.reload();\r\n        if(response.data.success)\r\n        {\r\n            dispatch({\r\n                type: GET_FEATURES_SUCCESS\r\n            });\r\n            // console.log('a');\r\n            // return <Redirect to='/login' />;\r\n        }\r\n        else {\r\n            \r\n            dispatch({\r\n                type: GET_FEATURES_FAIL\r\n            });\r\n        }\r\n\r\n    } catch (err) {\r\n\r\n        dispatch({\r\n            type: GET_FEATURES_FAIL\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const get_sentiment_count = () => async dispatch => {\r\n\r\n    const config = {\r\n        headers : {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken':  Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({'withCredentials':true});\r\n\r\n    console.log(body);\r\n    try {\r\n        const response = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/sentiment_count`, body, config);\r\n        console.log(response);\r\n        // window.location.reload();\r\n        if(response.data.success)\r\n        {\r\n            dispatch({\r\n                type: GET_FEATURES_COUNT_SUCCESS,\r\n                payload: response.data\r\n            });\r\n            // console.log('a');\r\n            // return <Redirect to='/login' />;\r\n        }\r\n        else {\r\n            \r\n            dispatch({\r\n                type: GET_FEATURES_COUNT_FAIL\r\n            });\r\n        }\r\n\r\n    } catch (err) {\r\n\r\n        dispatch({\r\n            type: GET_FEATURES_COUNT_FAIL\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const get_deceptive_count = () => async dispatch => {\r\n\r\n    const config = {\r\n        headers : {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken':  Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({'withCredentials':true});\r\n\r\n    console.log(body);\r\n    try {\r\n        const response = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/deceptive_count`, body, config);\r\n        console.log(response);\r\n        // window.location.reload();\r\n        if(response.data.success)\r\n        {\r\n            dispatch({\r\n                type: GET_DECEPTIVE_COUNT_SUCCESS,\r\n                payload: response.data\r\n            });\r\n            // console.log('a');\r\n            // return <Redirect to='/login' />;\r\n        }\r\n        else {\r\n            \r\n            dispatch({\r\n                type: GET_DECEPTIVE_COUNT_FAIL\r\n            });\r\n        }\r\n\r\n    } catch (err) {\r\n\r\n        dispatch({\r\n            type: GET_DECEPTIVE_COUNT_FAIL\r\n        });\r\n    }\r\n};\r\n\r\nexport const get_t_features = (file_name) => async dispatch => {\r\n\r\n    const config = {\r\n        headers : {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken':  Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({'withCredentials':true, \"file_name\": file_name });\r\n\r\n    console.log(body);\r\n    try {\r\n        const response = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/actual_features`, body, config);\r\n        console.log(response);\r\n        window.location.reload();\r\n        if(response.data.success)\r\n        {\r\n            dispatch({\r\n                type: GET_ACTUAL_FEATURES_SUCCESS\r\n            });\r\n            // console.log('a');\r\n            // return <Redirect to='/login' />;\r\n        }\r\n        else {\r\n            \r\n            dispatch({\r\n                type: GET_ACTUAL_FEATURES_FAIL\r\n            });\r\n        }\r\n\r\n    } catch (err) {\r\n\r\n        dispatch({\r\n            type: GET_ACTUAL_FEATURES_FAIL\r\n        });\r\n    }\r\n};\r\n\r\nexport const get_t_sentiment_count = () => async dispatch => {\r\n\r\n    const config = {\r\n        headers : {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken':  Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({'withCredentials':true});\r\n\r\n    console.log(body);\r\n    try {\r\n        const response = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/t_sentiment_count`, body, config);\r\n        console.log(response);\r\n        // window.location.reload();\r\n        if(response.data.success)\r\n        {\r\n            dispatch({\r\n                type: GET_T_SENTIMENT_COUNT_SUCCESS,\r\n                payload: response.data\r\n            });\r\n            // console.log('a');\r\n            // return <Redirect to='/login' />;\r\n        }\r\n        else {\r\n            \r\n            dispatch({\r\n                type: GET_T_SENTIMENT_COUNT_FAIL\r\n            });\r\n        }\r\n\r\n    } catch (err) {\r\n\r\n        dispatch({\r\n            type: GET_T_SENTIMENT_COUNT_FAIL\r\n        });\r\n    }\r\n};\r\n\r\nexport const get_t_deceptive_count = () => async dispatch => {\r\n\r\n    const config = {\r\n        headers : {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken':  Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({'withCredentials':true});\r\n\r\n    console.log(body);\r\n    try {\r\n        const response = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/t_deceptive_count`, body, config);\r\n        console.log(response);\r\n        // window.location.reload();\r\n        if(response.data.success)\r\n        {\r\n            dispatch({\r\n                type: GET_T_DECEPTIVE_COUNT_SUCCESS,\r\n                payload: response.data\r\n            });\r\n            // console.log('a');\r\n            // return <Redirect to='/login' />;\r\n        }\r\n        else {\r\n            \r\n            dispatch({\r\n                type: GET_T_DECEPTIVE_COUNT_FAIL\r\n            });\r\n        }\r\n\r\n    } catch (err) {\r\n\r\n        dispatch({\r\n            type: GET_T_DECEPTIVE_COUNT_FAIL\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const get_nbd_accuracy = () => async dispatch => {\r\n\r\n    const config = {\r\n        headers : {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken':  Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({'withCredentials':true});\r\n    console.log(body);\r\n\r\n    try {\r\n        const response = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/nbd_accuracy`, body, config);\r\n        console.log(response);\r\n        // window.location.reload();\r\n        if(response.data.success)\r\n        {\r\n            dispatch({\r\n                type: GET_NBD_ACCURACY_SUCCESS,\r\n                payload: response.data\r\n            });\r\n        }\r\n        else {\r\n            \r\n            dispatch({\r\n                type: GET_NBD_ACCURACY_FAIL\r\n            });\r\n        }\r\n\r\n    } catch (err) {\r\n\r\n        dispatch({\r\n            type: GET_NBD_ACCURACY_FAIL\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const get_rfd_accuracy = () => async dispatch => {\r\n\r\n    const config = {\r\n        headers : {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken':  Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({'withCredentials':true});\r\n    console.log(body);\r\n\r\n    try {\r\n        const response = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/rfd_accuracy`, body, config);\r\n        console.log(response);\r\n        // window.location.reload();\r\n        if(response.data.success)\r\n        {\r\n            dispatch({\r\n                type: GET_RFD_ACCURACY_SUCCESS,\r\n                payload: response.data\r\n            });\r\n        }\r\n        else {\r\n            \r\n            dispatch({\r\n                type: GET_RFD_ACCURACY_FAIL\r\n            });\r\n        }\r\n\r\n    } catch (err) {\r\n\r\n        dispatch({\r\n            type: GET_RFD_ACCURACY_FAIL\r\n        });\r\n    }\r\n};\r\n\r\nexport const get_svmd_accuracy = () => async dispatch => {\r\n\r\n    const config = {\r\n        headers : {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken':  Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({'withCredentials':true});\r\n\r\n    try {\r\n        const response = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/svmd_accuracy`, body, config);\r\n        console.log(response);\r\n        // window.location.reload();\r\n        if(response.data.success)\r\n        {\r\n            dispatch({\r\n                type: GET_SVMD_ACCURACY_SUCCESS,\r\n                payload: response.data\r\n            });\r\n        }\r\n        else {\r\n            \r\n            dispatch({\r\n                type: GET_SVMD_ACCURACY_FAIL\r\n            });\r\n        }\r\n\r\n    } catch (err) {\r\n\r\n        dispatch({\r\n            type: GET_SVMD_ACCURACY_FAIL\r\n        });\r\n    }\r\n};\r\n\r\nexport const get_deceptive_accuracies = () => async dispatch => {\r\n\r\n    const config = {\r\n        headers : {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken':  Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({'withCredentials':true});\r\n    \r\n    try {\r\n        const response = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/deceptive_accuracies`, body, config);\r\n        console.log(response);\r\n\r\n        if(response.data.success)\r\n        {\r\n            dispatch({\r\n                type: GET_DECEPTIVE_ACCURACIES_SUCCESS,\r\n                payload: response.data\r\n            });\r\n        }\r\n        else\r\n        {\r\n            dispatch({\r\n                type: GET_DECEPTIVE_ACCURACIES_FAIL\r\n            })\r\n        }\r\n    }\r\n    catch (err) {\r\n        dispatch({\r\n            type: GET_DECEPTIVE_ACCURACIES_FAIL\r\n        })\r\n    }\r\n};\r\n\r\nexport const get_users = () => async dispatch => {\r\n\r\n    const config = {\r\n        headers : {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken': Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({'withCredentials':true});\r\n\r\n    try {\r\n        const response = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/users`, body, config);\r\n        console.log(response);\r\n        \r\n        if(response.data.success)\r\n        {\r\n            dispatch({\r\n                type: GET_USERS_SUCCESS,\r\n                payload: response.data\r\n            });\r\n        }\r\n        else {\r\n            dispatch({\r\n                type: GET_USERS_FAIL\r\n            });\r\n        }\r\n    }\r\n    catch (err)\r\n    {\r\n        dispatch({\r\n            type: GET_USERS_FAIL\r\n        })\r\n    }\r\n};\r\n\r\n\r\nexport const get_data_counts = () => async dispatch => {\r\n\r\n    const config = {\r\n        headers : {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken': Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({'withCredentials':true});\r\n\r\n    try {\r\n        const response = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/data_counts`, body, config);\r\n        console.log(response);\r\n        \r\n        if(response.data.success)\r\n        {\r\n            dispatch({\r\n                type: GET_DATA_COUNTS_SUCCESS,\r\n                payload: response.data\r\n            });\r\n        }\r\n        else {\r\n            dispatch({\r\n                type: GET_DATA_COUNTS_FAIL\r\n            });\r\n        }\r\n    }\r\n    catch (err)\r\n    {\r\n        dispatch({\r\n            type: GET_DATA_COUNTS_FAIL\r\n        })\r\n    }\r\n};","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst CSRFToken = () => {\r\n    \r\n    const [csrftoken, setcsrftoken] = useState('');\r\n\r\n    const getCookie = (name) => {\r\n        let cookieValue = null;\r\n        if (document.cookie && document.cookie !== '') {\r\n            let cookies = document.cookie.split(';');\r\n            for (let i = 0; i < cookies.length; i++) {\r\n                let cookie = cookies[i].trim();\r\n                if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return cookieValue;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try{\r\n                await axios.get(`${process.env.REACT_APP_API_URL}/accounts/csrf_cookie`);\r\n            } catch (err) {\r\n\r\n            }\r\n        }\r\n        fetchData();\r\n        setcsrftoken(getCookie('csrftoken'));\r\n    }, []);\r\n\r\n    return (\r\n        <input type = 'hidden' name='csrfmiddlewaretoken' value = {csrftoken} />\r\n    );\r\n\r\n};\r\n\r\nexport default CSRFToken;","export default __webpack_public_path__ + \"static/media/positive.0d4276e4.jpg\";","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../actions/auth';\r\nimport { Redirect } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport CSRFToken from '../components/CSRFToken';\r\nimport { useState } from 'react';\r\nimport image from '../positive.jpg';\r\n\r\nconst Login = ({isAuthenticated, is_admin, login}) => {\r\n\r\n    const [formData, setFormData] = useState({\r\n        email:'',\r\n        password:''\r\n    })\r\n\r\n    const { email, password } = formData;\r\n\r\n    const onChange = e => setFormData({...formData, [e.target.name]: e.target.value});\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        login(email, password);\r\n    }\r\n\r\n    if(isAuthenticated && is_admin)\r\n        return <Redirect to = '/admindashboard' />\r\n    else if(isAuthenticated && is_admin == false)\r\n        return <Redirect to = '/dashboard' />\r\n\r\n        return (\r\n            <div className=\"container my-5\">\r\n                <div className=\"row align-items-center justify-content-center\">\r\n                    <div className=\"col-md-7 col-lg-5\">\r\n                        <div className=\"login-box p-4 p-md-5\">\r\n                            <h1 className=\"text-center\"> Sign In</h1>\r\n                            <form onSubmit = {e => onSubmit(e)}>\r\n                                <CSRFToken />\r\n                                <div className=\"form-group mb-3 email-div\" >\r\n                                    <input type=\"email\" value = {email} onChange = {e => onChange(e)} className=\"form-control email-field\" name=\"email\" id=\"email\" placeholder=\"Email\" required/>\r\n                                </div>\r\n                                \r\n                                <div className=\"mb-3 password-div\" >\r\n                                    <input type=\"password\" value = {password} onChange = {e => onChange(e)} minLength = '6' className=\"form-control password-field\" name=\"password\" id=\"password\" placeholder=\"Password\" required/>\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group mb-3 login-button-div\" >\r\n                                    <button type=\"submit\" className=\"form-control btn btn-primary rounded px-3 login-button-field\">Login</button>\r\n                                </div>\r\n                            </form>\r\n                            <p>\r\n                                Create Account? <Link to=\"/register\">Register</Link>\r\n                            </p>\r\n                            \r\n                        </div>\r\n                    </div>   \r\n                </div>\r\n                {/* <div>\r\n                    <img src={image}></img>\r\n                </div> */}\r\n            </div>  \r\n        );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin\r\n}); \r\n\r\nexport default connect(mapStateToProps, { login }) (Login);","import axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\nimport { REGISTER_SUCCESS, REGISTER_FAIL,\r\n         LOGIN_SUCCESS, LOGIN_FAIL,\r\n         LOGOUT_SUCCESS, LOGOUT_FAIL,\r\n         AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL\r\n} from './types';\r\nimport { load_user } from './profile';\r\nimport { Redirect } from 'react-router';\r\n\r\nexport const checkAuthenticated = () => async dispatch => {\r\n\r\n    const config = {\r\n         headers: {\r\n             'Accept':'application/json',\r\n             'Content-Type': 'application/json'\r\n         }\r\n    };\r\n\r\n    const response = await axios.get(`${process.env.REACT_APP_API_URL}/accounts/authenticated`, config);\r\n    console.log(response);\r\n\r\n    try {\r\n        if(response.data.error || response.data.isAuthenticated === 'error')\r\n        {\r\n            dispatch({\r\n                type: AUTHENTICATED_FAIL,\r\n                payload: false\r\n            });\r\n        }\r\n        else if(response.data.isAuthenticated === 'success')\r\n        {\r\n            dispatch({\r\n                type: AUTHENTICATED_SUCCESS,\r\n                payload: [true, response.data.is_admin]\r\n            });\r\n        }\r\n        else\r\n        {\r\n            dispatch({\r\n                type: AUTHENTICATED_FAIL,\r\n                payload: false\r\n            });\r\n        }\r\n    } catch (err) {\r\n        dispatch({\r\n            type: AUTHENTICATED_FAIL,\r\n            payload: false\r\n        });\r\n    }\r\n}\r\n\r\nexport const register = (email, password, re_password) => async dispatch => {\r\n\r\n    const config = {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken':  Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({email, password, re_password});\r\n\r\n    try {\r\n        const response = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/register`, body, config);\r\n        console.log(response);\r\n        if(response.data.error)\r\n        {\r\n            dispatch({\r\n                type: REGISTER_FAIL\r\n            });\r\n        }\r\n        else{\r\n            dispatch({\r\n                type: REGISTER_SUCCESS\r\n            });\r\n        }\r\n    } catch(err){\r\n        dispatch({\r\n            type: REGISTER_FAIL\r\n        });\r\n    }\r\n\r\n};\r\n\r\nexport const login = (email, password) => async dispatch => {\r\n\r\n    const config = {\r\n        headers:{\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken':  Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ email, password });\r\n\r\n    try {\r\n        const response = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/login`, body, config);\r\n        console.log(response);\r\n        if(response.data.success)\r\n        {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: [ response.data.email, response.data.is_admin ]\r\n\r\n            });\r\n            \r\n            dispatch(load_user());\r\n        }\r\n        else{\r\n            dispatch({\r\n                type: LOGIN_FAIL\r\n            });\r\n        }\r\n\r\n    } catch(err){\r\n        dispatch({\r\n            type: LOGIN_FAIL\r\n        });\r\n    }\r\n\r\n};\r\n\r\nexport const logout = () => async dispatch => {\r\n\r\n    const config = {\r\n        headers:{\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'X-CSRFToken':  Cookies.get('csrftoken')\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ \r\n        'withCredentials': true\r\n     });\r\n\r\n    try {\r\n        const response = await axios.post(`${process.env.REACT_APP_API_URL}/accounts/logout`, body, config);\r\n        console.log(response);\r\n        if(response.data.success)\r\n        {\r\n            dispatch({\r\n                type: LOGOUT_SUCCESS\r\n            });\r\n            // console.log('a');\r\n            // return <Redirect to='/login' />;\r\n        }\r\n        else{\r\n            dispatch({\r\n                type: LOGOUT_FAIL\r\n            });\r\n        }\r\n\r\n    } catch(err){\r\n        dispatch({\r\n            type: LOGOUT_FAIL\r\n        });\r\n    }\r\n\r\n};\r\n\r\n","import React from 'react';\r\nimport { register } from '../actions/auth';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport CSRFToken from '../components/CSRFToken';\r\n\r\nconst Register = ({ isAuthenticated, is_admin, register }) => {\r\n\r\n    const [formData, setformData] = useState({\r\n        email:'',\r\n        password:'',\r\n        re_password:''\r\n    });\r\n\r\n    const [accountCreated, setaccountCreated] = useState(false);\r\n    const { email, password, re_password } = formData;\r\n\r\n    const onChange = e => setformData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if(password === re_password)\r\n        {\r\n            register(email, password, re_password);\r\n            setaccountCreated(true);\r\n        }\r\n\r\n    };\r\n\r\n    if(isAuthenticated && is_admin)\r\n        return <Redirect to = '/admindashboard' />\r\n    else if(isAuthenticated && is_admin == false)\r\n        return <Redirect to='/dashboard' />;\r\n    else if(accountCreated)\r\n        return <Redirect to='/login' />;\r\n\r\n    return (\r\n        <div className=\"container my-5\">\r\n            <div className=\"row align-items-center justify-content-center\">\r\n                <div className=\"col-md-7 col-lg-5\">\r\n                    <div className=\"register-box p-4 p-md-5\">\r\n                        <h1 className=\"text-center\"> Sign Up</h1>\r\n                        <form onSubmit = {e => onSubmit(e)}>\r\n                            <CSRFToken />\r\n                            <div className=\"form-group mb-3 email-div\" >\r\n                                <input type=\"email\" value = {email} onChange = {e => onChange(e)} className=\"form-control email-field\" name=\"email\" id=\"email\" placeholder=\"Email\" required/>\r\n                            </div>\r\n                            \r\n                            <div className=\"mb-3 password-div\" >\r\n                                <input type=\"password\" value = {password} onChange = {e => onChange(e)} minLength = '6' className=\"form-control password-field\" name=\"password\" id=\"password\" placeholder=\"Password\" required/>\r\n                            </div>\r\n                            \r\n                            <div className=\"mb-3 re-password-div\" >\r\n                                <input type=\"password\" value = {re_password} onChange = {e => onChange(e)} minLength = '6' className=\"form-control re-password-field\" name=\"re_password\" id=\"re_password\" placeholder=\"Confirm Password\" required/>\r\n                            </div>\r\n                            \r\n                            <div className=\"form-group mb-3 login-button-div\" >\r\n                                <button type=\"submit\" className=\"form-control btn btn-primary rounded px-3 login-button-field\">Register</button>\r\n                            </div>\r\n                        </form>\r\n                        <p>\r\n                            Account Exists? <Link className=\"login-link\" to=\"/login\">Login</Link>\r\n                        </p>\r\n                        \r\n                    </div>\r\n                </div>   \r\n            </div>\r\n        </div>  \r\n    );\r\n}\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin\r\n});\r\n\r\nexport default connect(mapStateToProps, { register } )(Register);","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nconst Home = () => {\r\n    return (\r\n        <div className = 'container'>\r\n            <div className = 'mt-5 p-5 bg-white rounded-3'>\r\n                <h1 className = 'display-4 fw-bold'>Welcome to Deceptive Review Detection System</h1>\r\n                <p>\r\n                    This is a wonderful application with Admin and User.\r\n                </p>\r\n                <hr className = 'my-4' />\r\n                <p>Click the button to login and get started</p>\r\n                <Link className = 'btn btn-primary fw-bold' exact to='/login'>Login</Link>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { logout } from '../actions/auth';\r\n\r\nconst Navbar = ({isAuthenticated, is_admin, logout}) => {\r\n    \r\n    const adminAuthLinks = (\r\n        <Fragment>\r\n            <li className='nav-item'>\r\n                <NavLink className='nav-link'  exact to='/admindashboard'><i class=\"fas fa-tachometer-alt\"></i> Dashboard</NavLink>\r\n            </li>\r\n            <li className='nav-item'>\r\n                <NavLink className='nav-link'  exact to='/accuracy_metrices'><i class=\"far fa-chart-line\"></i> Accuracy</NavLink>\r\n            </li>\r\n            <li className='nav-item'>\r\n                <NavLink className='nav-link'  exact to='/review_analysis'><i class=\"fas fa-table\"></i> Review Analysis</NavLink>\r\n            </li>\r\n            <li className='nav-item'>\r\n                <a className='nav-link'  onClick={logout} href='#!'><i class=\"fas fa-sign-out-alt\"></i> Logout</a>\r\n            </li>\r\n        </Fragment>\r\n    );\r\n\r\n    const authLinks = (\r\n        <Fragment>\r\n            <li className='nav-item'>\r\n                <NavLink className='nav-link'  exact to='/dashboard'><i class=\"fas fa-tachometer-alt\"></i> Dashboard</NavLink>\r\n            </li>\r\n            <li className='nav-item'>\r\n                <a className='nav-link'  onClick={logout} href='#!'><i class=\"fas fa-sign-out-alt\"></i> Logout</a>\r\n            </li>\r\n        </Fragment>\r\n    );\r\n\r\n    const guestLinks = (\r\n        <Fragment>\r\n            <li className='nav-item'>\r\n                <NavLink className='nav-link'  exact to='/login'><i class=\"fas fa-sign-in-alt\"></i> Login</NavLink>\r\n            </li>\r\n            <li className='nav-item'>\r\n                <NavLink className='nav-link'  exact to='/register'><i class=\"fas fa-user-plus\"></i> Register</NavLink>\r\n            </li>\r\n        </Fragment>\r\n    );\r\n\r\n    return (\r\n        <nav className='navbar navbar-expand-lg navbar-dark bg-dark'>\r\n            <div className='container-fluid'>\r\n                <Link className='navbar-brand fw-bold' exact to='/'><i class=\"fas fa-theater-masks\"></i> Deceptive Review</Link>\r\n                <button className='navbar-toggler' type='button' data-bs-toggle='collapse' data-bs-target='#navbarNav' aria-controls='navbarNav' aria-expanded='false' aria-label='Toggle navigation'>\r\n                <span className='navbar-toggler-icon'></span>\r\n                </button>\r\n                <div className='collapse navbar-collapse' id='navbarNav'>\r\n                    <ul className='navbar-nav'>\r\n                        <li className='nav-item'>\r\n                            <NavLink className='nav-link'  exact to='/' ><i class=\"fas fa-home\"></i> Home</NavLink>\r\n                        </li>\r\n                        { isAuthenticated && is_admin ? adminAuthLinks : isAuthenticated ? authLinks : guestLinks }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin\r\n});\r\n\r\nexport default connect(mapStateToProps, { logout })(Navbar);","import React, { Fragment} from 'react';\r\nimport { useEffect } from 'react';\r\nimport { checkAuthenticated } from '../actions/auth';\r\nimport Navbar from '../components/Navbar';\r\nimport { connect } from 'react-redux';\r\nimport { get_deceptive_count, get_nbd_accuracy, get_rfd_accuracy, get_sentiment_count, get_svmd_accuracy, get_t_deceptive_count, get_t_sentiment_count, get_users, load_user } from '../actions/profile';\r\n\r\nconst Layout = ({ children, checkAuthenticated, load_user, get_sentiment_count, get_deceptive_count, get_t_sentiment_count, get_t_deceptive_count, get_nbd_accuracy, get_rfd_accuracy, get_svmd_accuracy, get_users }) => {\r\n\r\n    useEffect(()  => {\r\n        checkAuthenticated();\r\n        load_user();\r\n        // get_sentiment_count();\r\n        // get_deceptive_count();\r\n        // get_t_sentiment_count();\r\n        // get_t_deceptive_count();\r\n        // get_nbd_accuracy();\r\n        // get_rfd_accuracy();\r\n        // get_svmd_accuracy();\r\n    }, []);\r\n\r\n    return (\r\n        <Fragment>\r\n            <Navbar />\r\n            { children }\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(null, { checkAuthenticated, load_user, get_sentiment_count, get_deceptive_count, get_t_sentiment_count, get_t_deceptive_count, get_nbd_accuracy, get_rfd_accuracy, get_svmd_accuracy, get_users })(Layout);\r\n\r\n","import { REGISTER_SUCCESS, REGISTER_FAIL,\r\n         LOGIN_SUCCESS, LOGIN_FAIL,\r\n         LOGOUT_SUCCESS, LOGOUT_FAIL,\r\n         AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    isAuthenticated: null,\r\n    // email: '',\r\n    is_admin: false\r\n};\r\n\r\nexport default function(state = initialState, action){\r\n    const { type, payload } = action;\r\n\r\n    switch(type){\r\n        case AUTHENTICATED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: payload[0],\r\n                is_admin: payload[1]\r\n            } \r\n        case AUTHENTICATED_FAIL:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: payload\r\n            }\r\n        case REGISTER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: false\r\n            }\r\n        case LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: true,\r\n                // email: payload[0],\r\n                is_admin: payload[1]\r\n            }\r\n        case LOGOUT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: false,\r\n                // email: '',\r\n                is_admin: false\r\n            }\r\n        case REGISTER_FAIL:\r\n        case LOGIN_FAIL:\r\n        case LOGOUT_FAIL:\r\n            return state\r\n        default: \r\n            return state\r\n    }\r\n}","import { LOAD_USER_PROFILE_SUCCESS, LOAD_USER_PROFILE_FAIL,\r\n         GET_FEATURES_SUCCESS, GET_FEATURES_FAIL,\r\n         GET_FEATURES_COUNT_SUCCESS, GET_FEATURES_COUNT_FAIL,\r\n         GET_DECEPTIVE_COUNT_SUCCESS, GET_DECEPTIVE_COUNT_FAIL, \r\n         GET_T_SENTIMENT_COUNT_SUCCESS, GET_T_SENTIMENT_COUNT_FAIL,\r\n         GET_T_DECEPTIVE_COUNT_SUCCESS, GET_T_DECEPTIVE_COUNT_FAIL,\r\n         GET_NBD_ACCURACY_SUCCESS, GET_NBD_ACCURACY_FAIL,\r\n         GET_RFD_ACCURACY_SUCCESS, GET_RFD_ACCURACY_FAIL,\r\n         GET_SVMD_ACCURACY_SUCCESS, GET_SVMD_ACCURACY_FAIL, GET_DECEPTIVE_ACCURACIES_SUCCESS, GET_USERS_SUCCESS, GET_DATA_COUNTS_SUCCESS   \r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    email: '',\r\n    is_admin: false,\r\n    positive: 0,\r\n    neutral: 0,\r\n    negative: 0,\r\n    fake: 0,\r\n    genuine: 0,\r\n    t_positive: 0,\r\n    t_neutral: 0,\r\n    t_negative: 0,\r\n    t_fake: 0,\r\n    t_genuine: 0,\r\n    nbd_training_accuracy: 0,\r\n    nbd_testing_accuracy: 0,\r\n    rfd_training_accuracy: 0,\r\n    rfd_testing_accuracy: 0,\r\n    svmd_training_accuracy: 0,\r\n    svmd_testing_accuracy: 0,\r\n    users: [],\r\n    training_positive_count:0,\r\n    training_neutral_count:0,\r\n    training_negative_count:0,\r\n    training_fake_count:0, \r\n    training_genuine_count:0,\r\n    training_count:0, \r\n    testing_count:0,\r\n    users_positive_count:0, \r\n    users_neutral_count:0, \r\n    users_negative_count:0,\r\n    users_fake_count:0, \r\n    users_genuine_count: 0\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    const { type, payload } = action;\r\n    \r\n    switch(type) {\r\n        case LOAD_USER_PROFILE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                email: payload.email,\r\n                is_admin: payload.is_admin\r\n            }\r\n        case LOAD_USER_PROFILE_FAIL:\r\n            return {\r\n                ...state,\r\n                email: '',\r\n                is_admin: false\r\n            }\r\n        case GET_FEATURES_COUNT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                positive: payload.positive,\r\n                neutral: payload.neutral,\r\n                negative: payload.negative\r\n            }\r\n        case GET_DECEPTIVE_COUNT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                fake: payload.fake,\r\n                genuine: payload.genuine\r\n            }\r\n        case GET_T_SENTIMENT_COUNT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                t_positive: payload.positive,\r\n                t_neutral: payload.neutral,\r\n                t_negative: payload.negative\r\n            }\r\n        case GET_T_DECEPTIVE_COUNT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                t_fake: payload.fake,\r\n                t_genuine: payload.genuine\r\n            }\r\n        case GET_NBD_ACCURACY_SUCCESS:\r\n            return {\r\n                ...state,\r\n                nbd_training_accuracy: payload.nbd_training_accuracy,\r\n                nbd_testing_accuracy: payload.nbd_testing_accuracy,\r\n                users: payload.users\r\n            }\r\n        case GET_RFD_ACCURACY_SUCCESS:\r\n            return {\r\n                ...state,\r\n                rfd_training_accuracy: payload.rfd_training_accuracy,\r\n                rfd_testing_accuracy: payload.rfd_testing_accuracy\r\n            }\r\n        case GET_SVMD_ACCURACY_SUCCESS:\r\n            return {\r\n                ...state,\r\n                svmd_training_accuracy: payload.svmd_training_accuracy,\r\n                svmd_testing_accuracy: payload.svmd_testing_accuracy\r\n            }  \r\n        case GET_DECEPTIVE_ACCURACIES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                nbd_training_accuracy: payload.accuracies.nbd.nbd_training_accuracy,\r\n                nbd_testing_accuracy: payload.accuracies.nbd.nbd_testing_accuracy,\r\n                rfd_training_accuracy: payload.accuracies.rfd.rfd_training_accuracy,\r\n                rfd_testing_accuracy: payload.accuracies.rfd.rfd_testing_accuracy,\r\n                svmd_training_accuracy: payload.accuracies.svmd.svmd_training_accuracy,\r\n                svmd_testing_accuracy: payload.accuracies.svmd.svmd_testing_accuracy\r\n            }\r\n        case GET_USERS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                users: payload.users\r\n            }\r\n        case GET_DATA_COUNTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                training_positive_count: payload.counts.training.training_positive_count,\r\n                training_neutral_count: payload.counts.training.training_neutral_count,\r\n                training_negative_count: payload.counts.training.training_negative_count,\r\n                training_fake_count: payload.counts.training.training_fake_count,\r\n                training_genuine_count: payload.counts.training.training_genuine_count,\r\n                training_count: payload.counts.training.training_count,\r\n                testing_count: payload.counts.training.testing_count,\r\n\r\n                users_positive_count: payload.counts.users_data.users_positive_count,\r\n                users_neutral_count: payload.counts.users_data.users_neutral_count,\r\n                users_negative_count: payload.counts.users_data.users_negative_count,\r\n                users_fake_count: payload.counts.users_data.users_fake_count,\r\n                users_genuine_count: payload.counts.users_data.users_genuine_count,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport auth from './auth';\r\nimport profile from \"./profile\";\r\n\r\nexport default combineReducers({\r\n    auth,\r\n    profile\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ForbiddenMessage = () => {\r\n    return (\r\n        <div className = 'container'>\r\n            <div className = 'mt-5 p-5 bg-white rounded-3'>\r\n                <h1 className = 'display-4 fw-bold'>403 Forbidden</h1>\r\n                <p>\r\n                    You do not have access to this page please login and try again.\r\n                </p>\r\n                <hr className = 'my-4' />\r\n                <p>Click the button to login and get started.</p>\r\n                <Link className = 'btn btn-primary fw-bold' exact to='/login'>Login</Link>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ForbiddenMessage;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { send_data } from '../actions/profile';\r\nimport { useState } from 'react';\r\nimport ForbiddenMessage from './ForbiddenMessage';\r\n\r\nconst Dashboard = ({isAuthenticated, email, send_data}) => {\r\n    const [formData, setformData] = useState({\r\n        Email: email,\r\n        review: ''\r\n    });\r\n\r\n    const { Email, review } = formData;\r\n    const onChange = e => setformData({ ...formData, [e.target.name]: e.target.value });\r\n    \r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        console.log(email);\r\n\r\n        send_data(email, review);\r\n    }\r\n\r\n    if(isAuthenticated)\r\n        return (\r\n            <div className=\"container\">\r\n                <div className='row align-items-center justify-content-center'>\r\n                    <div className = 'col-md-7 col-lg-5'>\r\n                    <div className = 'mt-5 p-5 bg-white rounded-3'>\r\n                        <form onSubmit={e => onSubmit(e)}>\r\n                        <input type='email' className='w-75' value={email} name=\"email\" disabled />\r\n                        <div className=\"mb-3\">\r\n                            <label for=\"review\" class=\"form-label\">Enter Review</label>\r\n                            <textarea onChange = {e => onChange(e)} className=\"form-control review-field\" name=\"review\" id=\"review\" rows=\"3\"></textarea>\r\n                        </div>\r\n                        <button type='submit' className='btn btn-primary' name='review_submit'>Submit</button>\r\n                        </form>  \r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    else{\r\n        return (\r\n            // <div className = 'container'>\r\n            //     <div className = 'mt-5 p-5 bg-white rounded-3'>\r\n            //         <h1 className = 'display-4 fw-bold'>403 Forbidden</h1>\r\n            //         <p>\r\n            //             You do not have access to this page please login and try again.\r\n            //         </p>\r\n            //         <hr className = 'my-4' />\r\n            //         <p>Click the button to login and get started.</p>\r\n            //         <Link className = 'btn btn-primary fw-bold' exact to='/login'>Login</Link>\r\n            //     </div>\r\n            // </div>\r\n            <ForbiddenMessage />\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin,\r\n    email: state.profile.email,\r\n}); \r\n\r\nexport default connect(mapStateToProps, { send_data })(Dashboard);","import React, {useState} from 'react';\r\n\r\nconst ButtonCard = (props) => {\r\n    return (\r\n        <div className=\"col-md-4 col-lg-4\">\r\n            <form className=\"m-3\" name={props.Name} onSubmit={props.onSubmit}>\r\n                <button type=\"submit\" name={props.Name} className='btn text-start w-100'>\r\n                    <div className={\"card \" + props.bgColor + \" text-light mb-5\"}>\r\n                        <div className=\"card-body\">\r\n                            <div className=\"d-flex align-items-start\">\r\n                                <div className=\"fw-bold\">\r\n                                    <small className=\"text-white-50 d-block mb-1 text-uppercase\">{props.value}</small>\r\n                                    <span className=\"fs-3 mt-1\">{props.count}</span>\r\n                                </div>\r\n                                <div className=\"ms-auto\">\r\n                                    <div className={\"bg-white text-center \" + props.iconColor + \" d-50 rounded-circle\"}>\r\n                                        <i className={props.iconName}></i>    \r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mt-3\">\r\n                                <span className=\"text-white-50\">{props.text}</span>     \r\n                            </div>\r\n                        </div>\r\n                    </div> \r\n                \r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ButtonCard;","import React from 'react';\r\n\r\n\r\nconst Sample = () => {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 col-lg-3\">\r\n                    <div class=\"card bg-premium-dark text-light mb-5\">\r\n                        <div class=\"card-body\">\r\n                            <div class=\"d-flex align-items-start\">\r\n                                <div class=\"fw-bold\">\r\n                                    <small class=\"text-white-50 d-block mb-1 text-uppercase\">Naive Bayes Accuracy</small>\r\n                                    <span class=\"fs-3 mt-1\">586,356</span>\r\n                                </div>\r\n                                <div class=\"ms-auto\">\r\n                                    <div class=\"bg-white text-center text-success d-50 rounded-circle\">\r\n                                        <i class=\"far fa-chart-bar fa-lg\"></i>    \r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"mt-3\">\r\n                                <span class=\"text-white-50\">Training &amp; Testing Accuracy</span>     \r\n                            </div>\r\n                        </div>\r\n                    </div> \r\n                </div>\r\n            </div>\r\n                 \r\n        );\r\n};\r\n\r\nexport default Sample;\r\n","import React, {useEffect, useState} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { get_data_counts, get_deceptive_accuracies, get_deceptive_count, get_features, get_nbd_accuracy, get_rfd_accuracy, get_sentiment_count, get_svmd_accuracy, get_t_deceptive_count, get_t_features, get_t_sentiment_count, get_users } from '../actions/profile';\r\nimport ButtonCard from './ButtonCard';\r\nimport ForbiddenMessage from './ForbiddenMessage';\r\nimport Sample from './sample';\r\n\r\nconst AdminDashboard = ({isAuthenticated, is_admin, email, training_positive_count, training_neutral_count, training_negative_count, training_fake_count, training_genuine_count, get_features, get_sentiment_count, get_deceptive_count, get_t_sentiment_count, get_t_deceptive_count, get_t_features, get_nbd_accuracy, get_rfd_accuracy, get_svmd_accuracy, get_deceptive_accuracies, get_users, get_data_counts}) => {\r\n\r\n    useEffect(() => {\r\n        get_data_counts();\r\n    }, [])\r\n    // Training Data\r\n    const [posSuccess, setposSuccess] = useState(false);\r\n    const [negSuccess, setnegSuccess] = useState(false);\r\n    const [neuSuccess, setneuSuccess] = useState(false);\r\n    const [sentimentCount, setSentimentCount] = useState(false);\r\n    const [deceptiveCount, setDeceptiveCount] = useState(false);\r\n\r\n    // Actual Reviews\r\n    // const [tPosSuccess, setTPosSuccess] = useState(false);\r\n    // const [tNeuSuccess, setTNeuSuccess] = useState(false);\r\n    // const [tNegSuccess, setTNegSuccess] = useState(false);\r\n    // const [tSentimentCount, setTSentimentCount] = useState(false);\r\n    // const [tDeceptiveCount, setTDeceptiveCount] = useState(false);\r\n\r\n    // Accuracy\r\n    // const [nbdAccuracy, setNbdAccuracy] = useState(false);\r\n    // const [rfdAccuracy, setRfdAccuracy] = useState(false);\r\n    // const [svmdAccuracy, setSvmdAccuracy] = useState(false);\r\n\r\n    // const [deceptiveAccuracies, setDeceptiveAccuracies] = useState(false)\r\n\r\n    // Users\r\n    // const [users, setUsers] = useState(false)\r\n    \r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        console.log(e.target.name);\r\n        if(e.target.name === \"sentiment_count\")\r\n        {\r\n            get_sentiment_count();\r\n            setSentimentCount(true);\r\n        }\r\n        // else if(e.target.name === \"t_sentiment_count\")\r\n        // {\r\n        //     get_t_sentiment_count();\r\n        //     setTSentimentCount(true);\r\n        // }\r\n        else if(e.target.name === \"deceptive_count\")\r\n        {\r\n            get_deceptive_count();\r\n            setDeceptiveCount(true);\r\n        }\r\n        // else if(e.target.name === \"t_deceptive_count\")\r\n        // {\r\n        //     get_t_deceptive_count();\r\n        //     setTDeceptiveCount(true);\r\n        // }\r\n        // else if(e.target.name === \"nbd_accuracy\")\r\n        // {\r\n        //     get_nbd_accuracy();\r\n        //     setNbdAccuracy(true);\r\n        // }\r\n        // else if(e.target.name === \"rfd_accuracy\")\r\n        // {\r\n        //     get_rfd_accuracy();\r\n        //     setRfdAccuracy(true);\r\n        // }\r\n        // else if(e.target.name === \"svmd_accuracy\")\r\n        // {\r\n        //     get_svmd_accuracy();\r\n        //     setSvmdAccuracy(true);\r\n        // }\r\n        // else if(e.target.name === \"deceptive_accuracies\")\r\n        // {\r\n        //     get_deceptive_accuracies();\r\n        //     setDeceptiveAccuracies(true);\r\n        // }\r\n        // else if(e.target.name === \"t_positive\" || e.target.name === \"t_negative\" || e.target.name === \"t_neutral\")\r\n        // {\r\n        //     // Function all for actual data features\r\n        //     get_t_features(e.target.name);\r\n        //     if(e.target.name === \"t_positive\")\r\n        //         setTPosSuccess(true);\r\n        //     else if(e.target.name === \"t_negative\")\r\n        //         setTNegSuccess(true);\r\n        //     else if(e.target.name === \"t_neutral\")\r\n        //         setTNeuSuccess(true);\r\n        // }\r\n        else if(e.target.name === \"positive\" || e.target.name === \"negative\" || e.target.name === \"neutral\")\r\n        {\r\n            get_features(e.target.name);\r\n            if(e.target.name === \"positive\")\r\n                setposSuccess(true);\r\n            else if(e.target.name === \"negative\")\r\n                setnegSuccess(true);\r\n            else if(e.target.name === \"neutral\")\r\n                setneuSuccess(true);\r\n        } \r\n        // else if(e.target.name === \"users\")\r\n        // {\r\n        //     get_users();\r\n        //     setUsers(true);\r\n        // }\r\n    };\r\n\r\n    if(posSuccess)\r\n        return <Redirect to='/pos_features' />;\r\n    else if(negSuccess)\r\n        return <Redirect to='/neg_features' />;\r\n    else if(neuSuccess)\r\n        return <Redirect to='/neu_features' />;\r\n    else if(sentimentCount)\r\n        return <Redirect to='/sentiment_count' />;\r\n    else if(deceptiveCount)\r\n        return <Redirect to='/deceptive_count' />;\r\n    // else if(tPosSuccess)\r\n    //     return <Redirect to='/t_pos_features' />;\r\n    // else if(tNegSuccess)\r\n    //     return <Redirect to='/t_neg_features' />;\r\n    // else if(tNeuSuccess)\r\n    //     return <Redirect to='/t_neu_features' />;\r\n    // else if(tSentimentCount)\r\n    //     return <Redirect to='/t_sentiment_count' />;\r\n    // else if(tDeceptiveCount)\r\n    //     return <Redirect to='/t_deceptive_count' />;\r\n    // else if(nbdAccuracy)\r\n    //     return <Redirect to='/nbd_accuracy' />;\r\n    // else if(rfdAccuracy)\r\n    //     return <Redirect to='/rfd_accuracy' />;\r\n    // else if(svmdAccuracy)\r\n    //     return <Redirect to='/svmd_accuracy' />;\r\n    // else if(deceptiveAccuracies)\r\n    //     return <Redirect to='/accuracy_comparison' />;\r\n    // else if(users)\r\n    //     return <Redirect to='/users' />;\r\n \r\n    if(isAuthenticated && is_admin)\r\n        return (\r\n            <div className=\"\">\r\n                <div className=\"container my-4\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-7 col-md-7\">\r\n                            <div className=\"shadow-sm p-3 bg-delicate rounded\">\r\n                                <h2 className=\"text-black-50\">{\"Welcome \" + email} &#127881;</h2>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"training-data-analysis\">                    \r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-lg-12 col-md-12\">\r\n                                <h1 className=\"my-3\">Training Data Analysis</h1>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"container my-5\">   \r\n                        <div className=\"card shadow\">\r\n                            <div className=\"card-header bg-dark text-light rounded-radius-top\">\r\n                                <h4 className=\"fw-bold\"><i class=\"fas fa-icons\"></i> Feature Extraction</h4>\r\n                            </div>\r\n                            <div class=\"card-body\">\r\n                                <div className=\"row\">\r\n                                <ButtonCard \r\n                                    Name=\"positive\" \r\n                                    bgColor='bg-premium-dark' \r\n                                    iconName='far fa-smile-beam fa-lg'\r\n                                    iconColor='text-success'\r\n                                    onSubmit={e => onSubmit(e)} \r\n                                    value=\"Positive Features\"\r\n                                    text=\"Traning Data\"\r\n                                    count={training_positive_count}\r\n                                />\r\n\r\n                                <ButtonCard \r\n                                    Name=\"neutral\" \r\n                                    bgColor='bg-midnight-bloom' \r\n                                    iconName='far fa-meh-rolling-eyes fa-lg'\r\n                                    iconColor='text-bright-blue'\r\n                                    onSubmit={e => onSubmit(e)} \r\n                                    value=\"Neutral Features\"\r\n                                    text=\"Training Data\"\r\n                                    count={training_neutral_count}\r\n                                />\r\n\r\n                                <ButtonCard \r\n                                    Name=\"negative\" \r\n                                    bgColor='bg-coal'\r\n                                    iconName='far fa-frown fa-lg'\r\n                                    iconColor='text-danger' \r\n                                    onSubmit={e => onSubmit(e)} \r\n                                    value=\"Negative Features\"\r\n                                    text=\"Training Data\"\r\n                                    count={training_negative_count}\r\n                                />\r\n                            </div>\r\n                            </div>\r\n                        </div>\r\n                    </div> \r\n\r\n                    <div className=\"container my-5\">   \r\n                        <div className=\"card shadow\">\r\n                            <div className=\"card-header bg-dark text-light rounded-radius-top\">\r\n                                <h4 className=\"fw-bold\"><i class=\"fas fa-sort-amount-down-alt\"></i> Frequencies</h4>\r\n                            </div>\r\n                            <div class=\"card-body\">\r\n                                <div className=\"row\">\r\n                                    <ButtonCard \r\n                                        Name=\"deceptive_count\" \r\n                                        bgColor='bg-opa' \r\n                                        iconName='fas fa-chart-pie fa-lg' \r\n                                        iconColor='text-bright-blue' \r\n                                        onSubmit={e => onSubmit(e)} \r\n                                        value=\"Deceptive Count\"\r\n                                        text=\"Training Data\"\r\n                                        count={training_fake_count + training_genuine_count}   \r\n                                    />\r\n\r\n                                    <ButtonCard Name=\"sentiment_count\" \r\n                                        bgColor='bg-purple-love' \r\n                                        iconName='fas fa-chart-pie fa-lg' \r\n                                        iconColor='text-dull-purple' \r\n                                        onSubmit={e => onSubmit(e)} \r\n                                        value=\"Sentiment Count\"\r\n                                        text=\"Traning Data\"\r\n                                        count={training_positive_count + training_neutral_count + training_negative_count}\r\n                                    />\r\n                                </div>   \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* <div id=\"accuracy\">                    \r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-lg-12 col-md-12\">\r\n                                <h1 className=\"my-3\">Algorithm Accuracy</h1>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"container my-5\">   \r\n                        <div className=\"card shadow\">\r\n                            <div className=\"card-header bg-dark text-light rounded-radius-top\">\r\n                                <h4 className=\"fw-bold\">Accuracy Metrices</h4>\r\n                            </div>\r\n                            <div class=\"card-body\">\r\n                                <div className=\"row\">\r\n                            \r\n                                    <ButtonCard \r\n                                        Name=\"nbd_accuracy\" \r\n                                        bgColor='bg-endless-river' \r\n                                        iconName='far fa-chart-bar fa-lg'\r\n                                        iconColor='text-bright-blue'\r\n                                        onSubmit={e => onSubmit(e)} \r\n                                        value=\"NB Accuracy\"\r\n                                        \r\n                                    />\r\n\r\n                                    <ButtonCard \r\n                                        Name=\"rfd_accuracy\" \r\n                                        bgColor='bg-mauve' \r\n                                        iconName='far fa-chart-bar fa-lg'\r\n                                        iconColor='text-dark-purple'\r\n                                        onSubmit={e => onSubmit(e)} \r\n                                        value=\"RF Accuracy\"\r\n                                    />\r\n                                    \r\n                                    <ButtonCard \r\n                                        Name=\"svmd_accuracy\" \r\n                                        bgColor='bg-pizelex' \r\n                                        iconName='far fa-chart-bar fa-lg'\r\n                                        iconColor='text-dull-purple'\r\n                                        onSubmit={e => onSubmit(e)} \r\n                                        value=\"SVM Accuracy\"\r\n                                    />\r\n                                    \r\n                                    <ButtonCard \r\n                                        Name=\"deceptive_accuracies\" \r\n                                        bgColor='bg-forest' \r\n                                        iconName='far fa-chart-bar fa-lg'\r\n                                        iconColor='text-light-brown'\r\n                                        onSubmit = {e => onSubmit(e)} \r\n                                        value=\"Accuracy Comparison\" \r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"user-review-analysis\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-lg-12 col-md-12\">\r\n                                <h1 className=\"my-3\">User Review Analysis</h1>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"container my-5\">   \r\n                        <div className=\"card shadow\">\r\n                            <div className=\"card-header bg-dark text-light rounded-radius-top\">\r\n                                <h4 className=\"fw-bold\">Feature Extraction</h4>\r\n                            </div>\r\n                            <div class=\"card-body\">\r\n                                <div className=\"row\">\r\n                                    <ButtonCard \r\n                                        Name=\"t_positive\" \r\n                                        bgColor='bg-premium-dark' \r\n                                        iconName='far fa-smile-beam fa-lg'\r\n                                        iconColor='text-success'\r\n                                        onSubmit={e => onSubmit(e)} \r\n                                        value=\"Positive Features\"\r\n                                    />\r\n\r\n                                    <ButtonCard \r\n                                        Name=\"t_neutral\" \r\n                                        bgColor='bg-midnight-bloom' \r\n                                        iconName='far fa-meh-rolling-eyes fa-lg'\r\n                                        iconColor='text-bright-blue'\r\n                                        onSubmit={e => onSubmit(e)} \r\n                                        value=\"Neutral Features\"\r\n                                    />\r\n                                    <ButtonCard \r\n                                        Name=\"t_negative\" \r\n                                        bgColor='bg-lost-memory' \r\n                                        iconName='far fa-frown fa-lg'\r\n                                        iconColor='text-orange'\r\n                                        onSubmit={e => onSubmit(e)} \r\n                                        value=\"Negative Features\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"container my-5\">   \r\n                        <div className=\"card shadow\">\r\n                            <div className=\"card-header bg-dark text-light rounded-radius-top\">\r\n                                <h4 className=\"fw-bold\">Classification Report</h4>\r\n                            </div>\r\n                            <div class=\"card-body\">\r\n                                <div className=\"row\">\r\n                                    <ButtonCard \r\n                                        Name=\"t_deceptive_count\" \r\n                                        bgColor='bg-plum-plate' \r\n                                        iconName='fas fa-chart-pie fa-lg' \r\n                                        iconColor='text-dark-primary' \r\n                                        onSubmit={e => onSubmit(e)} \r\n                                        value=\"Deceptive Count\"\r\n                                    />\r\n\r\n                                    <ButtonCard \r\n                                        Name=\"t_sentiment_count\" \r\n                                        bgColor='bg-roseanna' \r\n                                        iconName='fas fa-chart-pie fa-lg' \r\n                                        iconColor='text-light-pink' \r\n                                        onSubmit={e => onSubmit(e)} \r\n                                        value=\"Sentiment Count\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"container my-5\">   \r\n                        <div className=\"card shadow\">\r\n                            <div className=\"card-header bg-dark text-light rounded-radius-top\">\r\n                                <h4 className=\"fw-bold\">Users Data</h4>\r\n                            </div>\r\n                            <div class=\"card-body\">\r\n                                <div className=\"row\">\r\n                                    <ButtonCard \r\n                                        Name=\"users\" \r\n                                        bgColor='bg-mauve' \r\n                                        iconName='fas fa-users fa-lg'\r\n                                        iconColor='text-dark-purple'\r\n                                        onSubmit = {e => onSubmit(e)} \r\n                                        value=\"Users Reviews\" \r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div> */}\r\n            </div>\r\n        );\r\n    else{\r\n        return (\r\n            <ForbiddenMessage />\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin,\r\n    email: state.profile.email,\r\n    positive: state.profile.positive,\r\n    neutral: state.profile.neutral,\r\n    negative: state.profile.negative,\r\n    training_positive_count: state.profile.training_positive_count,\r\n    training_neutral_count: state.profile.training_neutral_count,\r\n    training_negative_count: state.profile.training_negative_count,\r\n    training_fake_count: state.profile.training_fake_count,\r\n    training_genuine_count: state.profile.training_genuine_count,\r\n}); \r\n\r\nexport default connect(mapStateToProps, {get_features, get_sentiment_count, get_deceptive_count, get_t_sentiment_count, get_t_deceptive_count, get_t_features, get_nbd_accuracy, get_rfd_accuracy, get_svmd_accuracy, get_deceptive_accuracies, get_users, get_data_counts})(AdminDashboard);","import React from 'react';\r\n\r\nconst Features = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"d-flex flex-column align-items-center justify-content-center\">\r\n                    <div>\r\n                        <h1>{props.headingText}</h1>\r\n                    </div>\r\n                    <div>\r\n                        <img className=\"training_features\" src={props.imageSrc + '?nocache=' + Date.now()}></img>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Features;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport image from '../positive.jpg'\r\nimport Features from './Features';\r\nimport ForbiddenMessage from './ForbiddenMessage';\r\n\r\nconst PosFeatures = ({isAuthenticated, is_admin, email}) => {\r\n    if(isAuthenticated && is_admin)\r\n        return (\r\n            // <div className=\"container\">\r\n            //     <div className=\"row align-items-center justify-content-center\">\r\n            //         <div className=\"col-md-10 col-lg-10\">\r\n            //             <h1>Positive Features</h1>\r\n            //             <img className=\"training_features\" src={image + '?nocache=' + Date.now()}></img>\r\n            //         </div>\r\n            //     </div>\r\n            // </div>\r\n            <Features imageSrc={image} headingText=\"Positive Features\" />\r\n        );\r\n    else{\r\n        return (\r\n            // <div className = 'container'>\r\n            //     <div className = 'mt-5 p-5 bg-white rounded-3'>\r\n            //         <h1 className = 'display-4 fw-bold'>403 Forbidden</h1>\r\n            //         <p>\r\n            //             You do not have access to this page please login and try again.\r\n            //         </p>\r\n            //         <hr className = 'my-4' />\r\n            //         <p>Click the button to login and get started.</p>\r\n            //         <Link className = 'btn btn-primary fw-bold' exact to='/login'>Login</Link>\r\n            //     </div>\r\n            // </div>\r\n            <ForbiddenMessage />\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin,\r\n    email: state.profile.email\r\n}); \r\n\r\nexport default connect(mapStateToProps, {})(PosFeatures);","export default __webpack_public_path__ + \"static/media/negative.0d4276e4.jpg\";","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport image from '../negative.jpg'\r\nimport Features from './Features';\r\nimport ForbiddenMessage from './ForbiddenMessage';\r\n\r\nconst NegFeatures = ({isAuthenticated, is_admin, email}) => {\r\n    if(isAuthenticated && is_admin)\r\n        return (\r\n            // <div className=\"container\">\r\n            //     <div className=\"row\">\r\n            //         <div className=\"d-flex flex-column align-items-center justify-content-center\">\r\n            //             <div>\r\n            //                 <h1>Negative Features</h1>\r\n            //             </div>\r\n            //             <div>\r\n            //                 <img className=\"training_features\" src={image + '?nocache=' + Date.now()}></img>\r\n            //             </div>\r\n            //         </div>\r\n            //     </div>\r\n            // </div>\r\n            <Features imageSrc={image} headingText=\"Negative Features\" />\r\n        );\r\n    else{\r\n        return (\r\n            // <div className = 'container'>\r\n            //     <div className = 'mt-5 p-5 bg-white rounded-3'>\r\n            //         <h1 className = 'display-4 fw-bold'>403 Forbidden</h1>\r\n            //         <p>\r\n            //             You do not have access to this page please login and try again.\r\n            //         </p>\r\n            //         <hr className = 'my-4' />\r\n            //         <p>Click the button to login and get started.</p>\r\n            //         <Link className = 'btn btn-primary fw-bold' exact to='/login'>Login</Link>\r\n            //     </div>\r\n            // </div>\r\n            <ForbiddenMessage />\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin,\r\n    email: state.profile.email\r\n}); \r\n\r\nexport default connect(mapStateToProps, {})(NegFeatures);","export default __webpack_public_path__ + \"static/media/neutral.0d4276e4.jpg\";","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport image from '../neutral.jpg'\r\nimport Features from './Features';\r\nimport ForbiddenMessage from './ForbiddenMessage';\r\n\r\nconst NeuFeatures = ({isAuthenticated, is_admin, email}) => {\r\n    if(isAuthenticated && is_admin)\r\n        return (\r\n            // <div className=\"container\">\r\n            //     <div className=\"row align-items-center justify-content-center\">\r\n            //         <div className=\"col-md-6 col-lg-6\">\r\n            //             <h1>Neutral Features</h1>\r\n            //             <img src={image + '?nocache=' + Date.now()}></img>  \r\n            //         </div>\r\n            //     </div>\r\n            // </div>\r\n            <Features imageSrc={image} headingText=\"Neutral Features\" />\r\n        );\r\n    else{\r\n        return (\r\n            // <div className = 'container'>\r\n            //     <div className = 'mt-5 p-5 bg-white rounded-3'>\r\n            //         <h1 className = 'display-4 fw-bold'>403 Forbidden</h1>\r\n            //         <p>\r\n            //             You do not have access to this page please login and try again.\r\n            //         </p>\r\n            //         <hr className = 'my-4' />\r\n            //         <p>Click the button to login and get started.</p>\r\n            //         <Link className = 'btn btn-primary fw-bold' exact to='/login'>Login</Link>\r\n            //     </div>\r\n            // </div>\r\n            <ForbiddenMessage />\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin,\r\n    email: state.profile.email\r\n}); \r\n\r\nexport default connect(mapStateToProps, {})(NeuFeatures);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport {Pie, Doughnut} from 'react-chartjs-2';\r\nimport ForbiddenMessage from './ForbiddenMessage';\r\nimport { get_sentiment_count } from '../actions/profile';\r\nimport { useEffect } from 'react';\r\n\r\nconst SentimentCount = ({isAuthenticated, is_admin, email, positive, neutral, negative, get_sentiment_count}) => {\r\n\r\n    useEffect(() => {\r\n        get_sentiment_count();\r\n    }, [])\r\n\r\n    const state = {\r\n        labels: ['Positive', 'Neutral', 'Negative'],\r\n        datasets: [\r\n          {\r\n            label: 'Sentiment',\r\n            backgroundColor: [\r\n                'rgb(255, 99, 132)',\r\n                'rgb(54, 162, 235)',\r\n                'rgb(255, 205, 86)'\r\n            ],\r\n            // hoverBackgroundColor: [\r\n            // '#501800',\r\n            // '#4B5000',\r\n            // '#175000',\r\n            // ],\r\n            hoverOffset: 4,\r\n            data: [positive, neutral, negative]\r\n          }\r\n        ]\r\n      }\r\n\r\n    if(isAuthenticated && is_admin)\r\n        return (\r\n            <div className=\"m-5\">\r\n                {/* <p>Positive: {positive}</p>\r\n                <p>Neutral: {neutral}</p>\r\n                <p>Negative: {negative}</p> */}\r\n\r\n                <Doughnut\r\n                    className=\"doughnut\"\r\n                    data={state}\r\n                    width={754}\r\n                    height={400}\r\n                    options = {{\r\n                        maintainAspectRatio: false,\r\n                        plugins:{\r\n                            title:{\r\n                                display:true,\r\n                                text:'Sentiment Analysis for Training Data',\r\n                                font:{\r\n                                    size: 30\r\n                                },\r\n                                padding:{\r\n                                    bottom: 15\r\n                                },\r\n                                position:'top'\r\n                            },\r\n                            legend:{\r\n                                display:true,\r\n                                position: 'bottom',\r\n                                labels:{\r\n                                    padding: 20\r\n                                }\r\n                            }\r\n                        \r\n                        }\r\n                        \r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    else{\r\n        return (\r\n            <ForbiddenMessage />\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin,\r\n    email: state.profile.email,\r\n    positive: state.profile.positive,\r\n    neutral: state.profile.neutral,\r\n    negative: state.profile.negative\r\n}); \r\n\r\nexport default connect(mapStateToProps, {get_sentiment_count})(SentimentCount);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport {Pie} from 'react-chartjs-2';\r\nimport ForbiddenMessage from './ForbiddenMessage';\r\nimport { get_deceptive_count } from '../actions/profile';\r\nimport { useEffect } from 'react';\r\n\r\nconst DeceptiveCount = ({isAuthenticated, is_admin, email, fake, genuine, get_deceptive_count}) => {\r\n\r\n    useEffect(() => {\r\n        get_deceptive_count();\r\n    }, [])\r\n    \r\n    const state = {\r\n        labels: ['Fake', 'Genuine'],\r\n        datasets: [\r\n          {\r\n            label: 'Deceptive',\r\n            backgroundColor: [\r\n                'rgb(255, 99, 132)',\r\n                'rgb(54, 162, 235)',\r\n            ],\r\n            // hoverBackgroundColor: [\r\n            // '#501800',\r\n            // '#4B5000',\r\n            // '#175000',\r\n            // ],\r\n            hoverOffset: 4,\r\n            data: [fake, genuine]\r\n          }\r\n        ]\r\n      }\r\n\r\n    if(isAuthenticated && is_admin)\r\n        return (\r\n            <div className=\"m-5\">\r\n                {/* <p>Positive: {positive}</p>\r\n                <p>Neutral: {neutral}</p>\r\n                <p>Negative: {negative}</p> */}\r\n\r\n                <Pie\r\n                    data={state}\r\n                    width={754}\r\n                    height={400}\r\n                    options = {{\r\n                        maintainAspectRatio: false,\r\n                        plugins:{\r\n                            title:{\r\n                                display:true,\r\n                                text:'Deceptive count for training data',\r\n                                font:{\r\n                                    size: 30\r\n                                },\r\n                                padding:{\r\n                                    bottom: 15\r\n                                },\r\n                                position:'top'\r\n                            },\r\n                            legend:{\r\n                                display:true,\r\n                                position: 'bottom',\r\n                                labels:{\r\n                                    padding: 20\r\n                                }\r\n                            }\r\n                        \r\n                        }\r\n                        \r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    else{\r\n        return (\r\n            // <div className = 'container'>\r\n            //     <div className = 'mt-5 p-5 bg-white rounded-3'>\r\n            //         <h1 className = 'display-4 fw-bold'>403 Forbidden</h1>\r\n            //         <p>\r\n            //             You do not have access to this page please login and try again.\r\n            //         </p>\r\n            //         <hr className = 'my-4' />\r\n            //         <p>Click the button to login and get started.</p>\r\n            //         <Link className = 'btn btn-primary fw-bold' exact to='/login'>Login</Link>\r\n            //     </div>\r\n            // </div>\r\n            <ForbiddenMessage />\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin,\r\n    email: state.profile.email,\r\n    fake: state.profile.fake,\r\n    genuine: state.profile.genuine\r\n}); \r\n\r\nexport default connect(mapStateToProps, {get_deceptive_count})(DeceptiveCount);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport {Pie, Doughnut} from 'react-chartjs-2';\r\nimport ForbiddenMessage from './ForbiddenMessage';\r\nimport { get_t_sentiment_count } from '../actions/profile';\r\nimport { useEffect } from 'react';\r\n\r\nconst TSentimentCount = ({isAuthenticated, is_admin, email, positive, neutral, negative, get_t_sentiment_count}) => {\r\n    \r\n    useEffect(() => {\r\n        get_t_sentiment_count();\r\n    }, [])\r\n    \r\n    const state = {\r\n        labels: ['Positive', 'Neutral', 'Negative'],\r\n        datasets: [\r\n          {\r\n            label: 'Sentiment',\r\n            backgroundColor: [\r\n                'rgb(255, 99, 132)',\r\n                'rgb(54, 162, 235)',\r\n                'rgb(255, 205, 86)'\r\n            ],\r\n            // hoverBackgroundColor: [\r\n            // '#501800',\r\n            // '#4B5000',\r\n            // '#175000',\r\n            // ],\r\n            hoverOffset: 4,\r\n            data: [positive, neutral, negative]\r\n          }\r\n        ]\r\n      }\r\n\r\n    if(isAuthenticated && is_admin)\r\n        return (\r\n            <div className=\"m-5\">\r\n                <Doughnut\r\n                    className=\"doughnut\"\r\n                    data={state}\r\n                    width={754}\r\n                    height={400}\r\n                    options = {{\r\n                        maintainAspectRatio: false,\r\n                        plugins:{\r\n                            title:{\r\n                                display:true,\r\n                                text:'Sentiment Analysis for Actual Reviews',\r\n                                font:{\r\n                                    size: 30\r\n                                },\r\n                                padding:{\r\n                                    bottom: 15\r\n                                },\r\n                                position:'top'\r\n                            },\r\n                            legend:{\r\n                                display:true,\r\n                                position: 'bottom',\r\n                                labels:{\r\n                                    padding: 20\r\n                                }\r\n                            }\r\n                        \r\n                        }\r\n                        \r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    else{\r\n        return (\r\n            <ForbiddenMessage />\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin,\r\n    email: state.profile.email,\r\n    positive: state.profile.t_positive,\r\n    neutral: state.profile.t_neutral,\r\n    negative: state.profile.t_negative\r\n}); \r\n\r\nexport default connect(mapStateToProps, {get_t_sentiment_count})(TSentimentCount);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport {Pie} from 'react-chartjs-2';\r\nimport ForbiddenMessage from './ForbiddenMessage';\r\nimport { useEffect } from 'react';\r\nimport { get_t_deceptive_count } from '../actions/profile';\r\n\r\nconst TDeceptiveCount = ({isAuthenticated, is_admin, email, fake, genuine, get_t_deceptive_count}) => {\r\n\r\n    useEffect(() => {\r\n        get_t_deceptive_count();\r\n    }, [])\r\n\r\n    const state = {\r\n        labels: ['Fake', 'Genuine'],\r\n        datasets: [\r\n          {\r\n            label: 'Deceptive',\r\n            backgroundColor: [\r\n                'rgb(255, 99, 132)',\r\n                'rgb(54, 162, 235)',\r\n            ],\r\n            // hoverBackgroundColor: [\r\n            // '#501800',\r\n            // '#4B5000',\r\n            // '#175000',\r\n            // ],\r\n            hoverOffset: 4,\r\n            data: [fake, genuine]\r\n          }\r\n        ]\r\n      }\r\n\r\n    if(isAuthenticated && is_admin)\r\n        return (\r\n            <div className=\"m-5\">\r\n                {/* <p>Positive: {positive}</p>\r\n                <p>Neutral: {neutral}</p>\r\n                <p>Negative: {negative}</p> */}\r\n\r\n                <Pie\r\n                    data={state}\r\n                    width={754}\r\n                    height={400}\r\n                    options = {{\r\n                        maintainAspectRatio: false,\r\n                        plugins:{\r\n                            title:{\r\n                                display:true,\r\n                                text:'Deceptive Count for Actual Reviews',\r\n                                font:{\r\n                                    size: 30\r\n                                },\r\n                                padding:{\r\n                                    bottom: 15\r\n                                },\r\n                                position:'top'\r\n                            },\r\n                            legend:{\r\n                                display:true,\r\n                                position: 'bottom',\r\n                                labels:{\r\n                                    padding: 20\r\n                                }\r\n                            }\r\n                        \r\n                        }\r\n                        \r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    else{\r\n        return (\r\n            <ForbiddenMessage />\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin,\r\n    email: state.profile.email,\r\n    fake: state.profile.t_fake,\r\n    genuine: state.profile.t_genuine\r\n}); \r\n\r\nexport default connect(mapStateToProps, {get_t_deceptive_count})(TDeceptiveCount);\r\n","export default __webpack_public_path__ + \"static/media/t_positive.0d4276e4.jpg\";","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport image from '../t_positive.jpg'\r\nimport Features from './Features';\r\nimport ForbiddenMessage from './ForbiddenMessage';\r\n\r\nconst PosFeatures = ({isAuthenticated, is_admin, email}) => {\r\n    if(isAuthenticated && is_admin)\r\n        return (\r\n            // <div className=\"container\">\r\n            //     <div className=\"row align-items-center justify-content-center\">\r\n            //         <div className=\"col-md-6 col-lg-6\">\r\n            //             <h1>Positive Features</h1>\r\n            //             <img src={image + '?nocache=' + Date.now()}></img>\r\n            //         </div>\r\n            //     </div>\r\n            // </div>\r\n            <Features imageSrc={image} headingText=\"Reviews Positive Features\" />\r\n        );\r\n    else{\r\n        return (\r\n            // <div className = 'container'>\r\n            //     <div className = 'mt-5 p-5 bg-white rounded-3'>\r\n            //         <h1 className = 'display-4 fw-bold'>403 Forbidden</h1>\r\n            //         <p>\r\n            //             You do not have access to this page please login and try again.\r\n            //         </p>\r\n            //         <hr className = 'my-4' />\r\n            //         <p>Click the button to login and get started.</p>\r\n            //         <Link className = 'btn btn-primary fw-bold' exact to='/login'>Login</Link>\r\n            //     </div>\r\n            // </div>\r\n            <ForbiddenMessage />\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin,\r\n    email: state.profile.email\r\n}); \r\n\r\nexport default connect(mapStateToProps, {})(PosFeatures);","export default __webpack_public_path__ + \"static/media/t_neutral.0d4276e4.jpg\";","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport image from '../t_neutral.jpg'\r\nimport Features from './Features';\r\nimport ForbiddenMessage from './ForbiddenMessage';\r\n\r\nconst TNeuFeatures = ({isAuthenticated, is_admin, email}) => {\r\n    if(isAuthenticated && is_admin)\r\n        return (\r\n            // <div className=\"container\">\r\n            //     <div className=\"row align-items-center justify-content-center\">\r\n            //         <div className=\"col-md-6 col-lg-6\">\r\n            //             <h1>Neutral Features</h1>\r\n            //             <img src={image + '?nocache=' + Date.now()}></img>\r\n            //         </div>\r\n            //     </div>\r\n            // </div>\r\n            <Features imageSrc={image} headingText=\"Reviews Neutral Features\" />\r\n        );\r\n    else{\r\n        return (\r\n            // <div className = 'container'>\r\n            //     <div className = 'mt-5 p-5 bg-white rounded-3'>\r\n            //         <h1 className = 'display-4 fw-bold'>403 Forbidden</h1>\r\n            //         <p>\r\n            //             You do not have access to this page please login and try again.\r\n            //         </p>\r\n            //         <hr className = 'my-4' />\r\n            //         <p>Click the button to login and get started.</p>\r\n            //         <Link className = 'btn btn-primary fw-bold' exact to='/login'>Login</Link>\r\n            //     </div>\r\n            // </div>\r\n            <ForbiddenMessage />\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin,\r\n    email: state.profile.email\r\n}); \r\n\r\nexport default connect(mapStateToProps, {})(TNeuFeatures);","export default __webpack_public_path__ + \"static/media/t_negative.0d4276e4.jpg\";","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport image from '../t_negative.jpg'\r\nimport Features from './Features';\r\nimport ForbiddenMessage from './ForbiddenMessage';\r\n\r\nconst TNegFeatures = ({isAuthenticated, is_admin, email}) => {\r\n    if(isAuthenticated && is_admin)\r\n        return (\r\n            // <div  className=\"container\">\r\n            //     <div className=\"row align-items-center justify-content-center\">\r\n            //         <div className=\"col-md-6 col-lg-6\">\r\n            //             <h1>Negative Features</h1>\r\n            //             <img src={image + '?nocache=' + Date.now()}></img>\r\n            //         </div>\r\n            //     </div>\r\n            // </div>\r\n            <Features imageSrc={image} headingText=\"Reviews Negative Features\" />\r\n        );\r\n    else{\r\n        return (\r\n            // <div className = 'container'>\r\n            //     <div className = 'mt-5 p-5 bg-white rounded-3'>\r\n            //         <h1 className = 'display-4 fw-bold'>403 Forbidden</h1>\r\n            //         <p>\r\n            //             You do not have access to this page please login and try again.\r\n            //         </p>\r\n            //         <hr className = 'my-4' />\r\n            //         <p>Click the button to login and get started.</p>\r\n            //         <Link className = 'btn btn-primary fw-bold' exact to='/login'>Login</Link>\r\n            //     </div>\r\n            // </div>\r\n            <ForbiddenMessage />\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin,\r\n    email: state.profile.email\r\n}); \r\n\r\nexport default connect(mapStateToProps, {})(TNegFeatures);","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport {Bar} from 'react-chartjs-2';\r\nimport ReactPaginate from 'react-paginate';\r\nimport ForbiddenMessage from './ForbiddenMessage';\r\nimport { get_nbd_accuracy } from '../actions/profile';\r\nimport { useEffect } from 'react';\r\n\r\nconst NBDAccuracy = ({isAuthenticated, is_admin, email, training_accuracy, testing_accuracy, users_reviews, get_nbd_accuracy}) => {\r\n\r\n    useEffect(() => {\r\n        get_nbd_accuracy();\r\n    }, [])\r\n\r\n    const state = {\r\n        labels: ['Training', 'Testing'],\r\n        datasets: [\r\n          {\r\n            label: 'Dataset 1',\r\n            backgroundColor: [\r\n                'rgb(255, 99, 132)',\r\n                'rgb(255, 205, 86)'\r\n            ],\r\n            // hoverBackgroundColor: [\r\n            // '#501800',\r\n            // '#4B5000',\r\n            // '#175000',\r\n            // ],\r\n            hoverOffset: 4,\r\n            data: [training_accuracy, testing_accuracy]\r\n          }\r\n        ]\r\n    }\r\n\r\n    // const [pageNumber, setPageNumber] = useState(0);\r\n\r\n    // const usersPerPage = 2\r\n    // const pageVisited = pageNumber * usersPerPage;\r\n\r\n    \r\n    // const displayUsers = users_reviews.slice(pageVisited, pageVisited + usersPerPage).map((user, index) => {\r\n    //     return (\r\n    //         <tr>\r\n    //             <th scope=\"row\">{pageVisited + index + 1}</th>\r\n    //             <td>{user[0]}</td>\r\n    //             <td>{user[1].length > 100 ? user[1].slice(0, 100) + \"...\" : user[1]}</td>\r\n    //             <td>{user[2].length > 100 ? user[2].slice(0, 100) + \"...\" : user[2]}</td>\r\n    //             <td>{user[3]}</td>\r\n    //             <td>{user[4]}</td>\r\n    //         </tr>\r\n    //     );\r\n    // })\r\n\r\n    // const pageCount = Math.ceil(users_reviews.length / usersPerPage);\r\n\r\n    // const changePage = ({selected}) => {\r\n    //     setPageNumber(selected);\r\n    // }\r\n    if(isAuthenticated && is_admin)\r\n        return (\r\n                <div className=\"container my-5\">\r\n                    \r\n                    <div className=\"row align-items-center justify-content-center\">\r\n                        <div className=\"col-md-8 col-lg-6\">\r\n                        <Bar\r\n                            data={state}\r\n                            width={600}\r\n                            height={400}\r\n                            options = {{\r\n                                maintainAspectRatio: false,\r\n                                plugins:{\r\n                                    title:{\r\n                                        display:true,\r\n                                        text:'Naive Bayes Accuracy for Training and Testing Data',\r\n                                        font:{\r\n                                            size: 30\r\n                                        },\r\n                                        padding:{\r\n                                            bottom: 15\r\n                                        },\r\n                                        position:'top'\r\n                                    },\r\n                                    legend:{\r\n                                        display:true,\r\n                                        position: 'bottom',\r\n                                        labels:{\r\n                                            padding: 20\r\n                                        }\r\n                                    }\r\n                                \r\n                                }\r\n                                \r\n                            }}\r\n                        />\r\n                        </div>\r\n                    </div>\r\n                    {/* <div className=\"row align-items-center justify-content-center\">\r\n                        <div className=\"col-md-12 col-lg-12\">\r\n                            <table className=\"table table-hover table-striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th scope=\"col\">#</th>\r\n                                        <th scope=\"col\">Email</th>\r\n                                        <th scope=\"col\">Review</th>\r\n                                        <th scope=\"col\">Filtered Review</th>\r\n                                        <th scope=\"col\">Deceptive</th>\r\n                                        <th scope=\"col\">Last Updated</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {displayUsers}    \r\n                                </tbody>                     \r\n                            </table>      \r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row align-items-center justify-content-center my-4\">\r\n                        <div className=\"col-md-12 col-lg-12\">\r\n                            <ReactPaginate \r\n                            previousLabel={\"Previous\"}\r\n                            nextLabel={\"Next\"}\r\n                            pageCount={pageCount}\r\n                            onPageChange={changePage}\r\n                            containerClassName={\"paginationBttns\"}\r\n                            previousClassName={\"previousBttn\"}\r\n                            nextClassName={\"nextBttn\"}\r\n                            disabledClassName={\"paginationDisabled\"}\r\n                            activeClassName={\"paginationActive\"}\r\n                            />\r\n                        </div>\r\n                    </div> */}\r\n                </div>\r\n                \r\n        );\r\n    else{\r\n        return (\r\n            <ForbiddenMessage />\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin,\r\n    email: state.profile.email,\r\n    training_accuracy: state.profile.nbd_training_accuracy,\r\n    testing_accuracy: state.profile.nbd_testing_accuracy, \r\n    users_reviews: state.profile.users\r\n}); \r\n\r\nexport default connect(mapStateToProps, {get_nbd_accuracy})(NBDAccuracy);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport {Bar} from 'react-chartjs-2';\r\nimport ForbiddenMessage from './ForbiddenMessage';\r\nimport { useEffect } from 'react';\r\nimport { get_svmd_accuracy } from '../actions/profile';\r\n\r\nconst SVMDAccuracy = ({isAuthenticated, is_admin, email, training_accuracy, testing_accuracy, get_svmd_accuracy}) => {\r\n    \r\n    useEffect(() => {\r\n       get_svmd_accuracy();\r\n    }, [])\r\n    \r\n    const state = {\r\n        labels: ['Training', 'Testing'],\r\n        datasets: [\r\n          {\r\n            label: 'Dataset 1',\r\n            backgroundColor: [\r\n                'rgb(255, 99, 132)',\r\n                'rgb(255, 205, 86)'\r\n            ],\r\n            // hoverBackgroundColor: [\r\n            // '#501800',\r\n            // '#4B5000',\r\n            // '#175000',\r\n            // ],\r\n            hoverOffset: 4,\r\n            data: [training_accuracy, testing_accuracy]\r\n          }\r\n        ]\r\n      }\r\n\r\n    if(isAuthenticated && is_admin)\r\n        return (\r\n                <div className=\"container my-5\">\r\n                    \r\n                    <div className=\"row align-items-center justify-content-center\">\r\n                        <div className=\"col-md-8 col-lg-6\">\r\n                        <Bar\r\n                            data={state}\r\n                            width={600}\r\n                            height={400}\r\n                            options = {{\r\n                                maintainAspectRatio: false,\r\n                                plugins:{\r\n                                    title:{\r\n                                        display:true,\r\n                                        text:'SVM Accuracy for Training and Testing Data',\r\n                                        font:{\r\n                                            size: 30\r\n                                        },\r\n                                        padding:{\r\n                                            bottom: 15\r\n                                        },\r\n                                        position:'top'\r\n                                    },\r\n                                    legend:{\r\n                                        display:true,\r\n                                        position: 'bottom',\r\n                                        labels:{\r\n                                            padding: 20\r\n                                        }\r\n                                    }\r\n                                \r\n                                }\r\n                                \r\n                            }}\r\n                />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n        );\r\n    else{\r\n        return (\r\n            <ForbiddenMessage />\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin,\r\n    email: state.profile.email,\r\n    training_accuracy: state.profile.svmd_training_accuracy,\r\n    testing_accuracy: state.profile.svmd_testing_accuracy, \r\n}); \r\n\r\nexport default connect(mapStateToProps, {get_svmd_accuracy})(SVMDAccuracy);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport {Bar} from 'react-chartjs-2';\r\nimport ForbiddenMessage from './ForbiddenMessage';\r\nimport { useEffect } from 'react';\r\nimport { get_rfd_accuracy } from '../actions/profile';\r\n\r\nconst RFDAccuracy = ({isAuthenticated, is_admin, email, training_accuracy, testing_accuracy, get_rfd_accuracy}) => {\r\n\r\n    useEffect(() => {\r\n       get_rfd_accuracy();\r\n    }, [])\r\n    \r\n    const state = {\r\n        labels: ['Training', 'Testing'],\r\n        datasets: [\r\n          {\r\n            label: 'Dataset 1',\r\n            backgroundColor: [\r\n                'rgb(255, 99, 132)',\r\n                'rgb(255, 205, 86)'\r\n            ],\r\n            // hoverBackgroundColor: [\r\n            // '#501800',\r\n            // '#4B5000',\r\n            // '#175000',\r\n            // ],\r\n            hoverOffset: 4,\r\n            data: [training_accuracy, testing_accuracy]\r\n          }\r\n        ]\r\n      }\r\n\r\n    if(isAuthenticated && is_admin)\r\n        return (\r\n                <div className=\"container my-5\">\r\n                    \r\n                    <div className=\"row align-items-center justify-content-center\">\r\n                        <div className=\"col-md-8 col-lg-6\">\r\n                        <Bar\r\n                            data={state}\r\n                            width={600}\r\n                            height={400}\r\n                            options = {{\r\n                                maintainAspectRatio: false,\r\n                                plugins:{\r\n                                    title:{\r\n                                        display:true,\r\n                                        text:'Random Forest Accuracy for Training and Testing Data',\r\n                                        font:{\r\n                                            size: 30\r\n                                        },\r\n                                        padding:{\r\n                                            bottom: 15\r\n                                        },\r\n                                        position:'top'\r\n                                    },\r\n                                    legend:{\r\n                                        display:true,\r\n                                        position: 'bottom',\r\n                                        labels:{\r\n                                            padding: 20\r\n                                        }\r\n                                    }\r\n                                \r\n                                }\r\n                                \r\n                            }}\r\n                />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n        );\r\n    else{\r\n        return (\r\n            <ForbiddenMessage />\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin,\r\n    email: state.profile.email,\r\n    training_accuracy: state.profile.rfd_training_accuracy,\r\n    testing_accuracy: state.profile.rfd_testing_accuracy, \r\n}); \r\n\r\nexport default connect(mapStateToProps, {get_rfd_accuracy})(RFDAccuracy);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport ForbiddenMessage from './ForbiddenMessage';\r\nimport { get_deceptive_accuracies, get_users } from '../actions/profile';\r\nimport { useEffect } from 'react';\r\n\r\nconst AccuracyComparison = ({isAuthenticated, is_admin, nbd_training_accuracy, nbd_testing_accuracy, rfd_training_accuracy, rfd_testing_accuracy, svmd_training_accuracy, svmd_testing_accuracy, get_users, get_deceptive_accuracies}) => {\r\n    \r\n    useEffect(() => {\r\n        get_deceptive_accuracies();\r\n    }, [])\r\n    \r\n    const state = {\r\n        labels: ['Naive Bayes', 'Random Forest', 'SVM'],\r\n        datasets: [\r\n            {\r\n              label: 'Training',\r\n              backgroundColor: 'rgb(255, 159, 64)',\r\n              // hoverBackgroundColor: [\r\n              // '#501800',\r\n              // '#4B5000',\r\n              // '#175000',\r\n              // ],\r\n              hoverOffset: 4,\r\n              data: [nbd_training_accuracy, rfd_training_accuracy, svmd_training_accuracy]\r\n            }, \r\n            {\r\n                label: 'Testing',\r\n                backgroundColor: 'rgb(75, 192, 192)',\r\n                // hoverBackgroundColor: [\r\n                // '#501800',\r\n                // '#4B5000',\r\n                // '#175000',\r\n                // ],\r\n                hoverOffset: 4,\r\n                data: [nbd_testing_accuracy, rfd_testing_accuracy, svmd_testing_accuracy]\r\n              },\r\n          ]\r\n    }\r\n    if(isAuthenticated && is_admin) \r\n    {\r\n        return(\r\n            <div className=\"container my-5\">\r\n                <div className=\"row align-items-center justify-content-center\">\r\n                    <div className=\"col-md-8 col-lg-6\">\r\n                        <Bar\r\n                            data={state}\r\n                            width={600}\r\n                            height={400}\r\n                            options = {{\r\n                                maintainAspectRatio: false,\r\n                                plugins:{\r\n                                    title:{\r\n                                        display:true,\r\n                                        text:'Accuracy Comparison for NB, RF and SVM',\r\n                                        font:{\r\n                                            size: 30\r\n                                        },\r\n                                        padding:{\r\n                                            bottom: 15\r\n                                        },\r\n                                        position:'top'\r\n                                    },\r\n                                    legend:{\r\n                                        display:true,\r\n                                        position: 'bottom',\r\n                                        labels:{\r\n                                            padding: 20\r\n                                        }\r\n                                    }\r\n                                \r\n                                }\r\n                                \r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else\r\n    {\r\n        return (\r\n            <ForbiddenMessage />\r\n        );\r\n    }\r\n    \r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin,\r\n    email: state.profile.email,\r\n    nbd_training_accuracy: state.profile.nbd_training_accuracy,\r\n    rfd_training_accuracy: state.profile.rfd_training_accuracy,\r\n    svmd_training_accuracy: state.profile.svmd_training_accuracy,\r\n    nbd_testing_accuracy: state.profile.nbd_testing_accuracy,\r\n    rfd_testing_accuracy: state.profile.rfd_testing_accuracy,\r\n    svmd_testing_accuracy: state.profile.svmd_testing_accuracy,\r\n});\r\n\r\nexport default connect(mapStateToProps, {get_users, get_deceptive_accuracies})(AccuracyComparison);","import React from 'react';\r\nimport ReactPaginate from 'react-paginate';\r\nimport { connect } from 'react-redux';\r\nimport ForbiddenMessage from './ForbiddenMessage';\r\nimport { useState } from 'react';\r\nimport { get_users, load_user } from '../actions/profile';\r\nimport { useEffect } from 'react';\r\n\r\nconst UserReviews = ({isAuthenticated, is_admin, users, get_users}) => {\r\n\r\n    useEffect(()  => {\r\n        get_users();\r\n    }, []);\r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n\r\n    const usersPerPage = 5\r\n    const pageVisited = pageNumber * usersPerPage;\r\n\r\n    const displayUsers = users.slice(pageVisited, pageVisited + usersPerPage).map((user, index) => {\r\n        return (\r\n            <tr>\r\n                <th scope=\"row\">{pageVisited + index + 1}</th>\r\n                <td>{user.email}</td>\r\n                <td>{(user.review).length > 100 ? (user.review).slice(0, 100) + \"...\" : user.review}</td>\r\n                <td>{(user.filtered_review).length > 100 ? (user.filtered_review).slice(0, 100) + \"...\" : user.filtered_review}</td>\r\n                <td>{user.deceptive}</td>\r\n                <td>{user.sentiment}</td>\r\n                <td>{user.last_updated}</td>\r\n            </tr>\r\n        );\r\n    });\r\n\r\n    const pageCount = Math.ceil(users.length / usersPerPage);\r\n\r\n    const changePage = ({selected}) => {\r\n        setPageNumber(selected);\r\n    }\r\n    \r\n    if(isAuthenticated && is_admin)\r\n    {   \r\n        return(\r\n            <div>\r\n                <div className=\"row align-items-center justify-content-center m-4\">\r\n                    <div className=\"col-md-12 col-lg-12\">\r\n                        <table className=\"table table-hover table-striped\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th scope=\"col\">#</th>\r\n                                    <th scope=\"col\">Email</th>\r\n                                    <th scope=\"col\">Review</th>\r\n                                    <th scope=\"col\">Filtered Review</th>\r\n                                    <th scope=\"col\">Deceptive</th>\r\n                                    <th scope=\"col\">Sentiment</th>\r\n                                    <th scope=\"col\">Last Updated</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {displayUsers}    \r\n                            </tbody>                     \r\n                        </table>      \r\n                    </div>\r\n                </div>\r\n                <div className=\"row align-items-center justify-content-center my-4\">\r\n                    <div className=\"col-md-12 col-lg-12\">\r\n                        <ReactPaginate \r\n                        previousLabel={\"Previous\"}\r\n                        nextLabel={\"Next\"}\r\n                        pageCount={pageCount}\r\n                        onPageChange={changePage}\r\n                        containerClassName={\"paginationBttns\"}\r\n                        previousClassName={\"previousBttn\"}\r\n                        nextClassName={\"nextBttn\"}\r\n                        disabledClassName={\"paginationDisabled\"}\r\n                        activeClassName={\"paginationActive\"}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else \r\n    {\r\n        return (\r\n            <ForbiddenMessage />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin,\r\n    users: state.profile.users\r\n});\r\nexport default connect(mapStateToProps, {get_users})(UserReviews);","import React, {useEffect, useState} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { get_data_counts, get_deceptive_accuracies, get_nbd_accuracy, get_rfd_accuracy, get_svmd_accuracy, } from '../actions/profile';\r\nimport ButtonCard from './ButtonCard';\r\nimport ForbiddenMessage from './ForbiddenMessage';\r\nimport Sample from './sample';\r\n\r\nconst AccuracyMetrices = ({isAuthenticated, is_admin, email, get_nbd_accuracy, get_rfd_accuracy, get_svmd_accuracy, get_deceptive_accuracies, training_count, testing_count, get_data_counts}) => {\r\n\r\n    useEffect(() => {\r\n        get_data_counts();\r\n    }, [])\r\n\r\n    // Accuracy\r\n    const [nbdAccuracy, setNbdAccuracy] = useState(false);\r\n    const [rfdAccuracy, setRfdAccuracy] = useState(false);\r\n    const [svmdAccuracy, setSvmdAccuracy] = useState(false);\r\n\r\n    const [deceptiveAccuracies, setDeceptiveAccuracies] = useState(false)\r\n\r\n    \r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        console.log(e.target.name);\r\n        if(e.target.name === \"nbd_accuracy\")\r\n        {\r\n            get_nbd_accuracy();\r\n            setNbdAccuracy(true);\r\n        }\r\n        else if(e.target.name === \"rfd_accuracy\")\r\n        {\r\n            get_rfd_accuracy();\r\n            setRfdAccuracy(true);\r\n        }\r\n        else if(e.target.name === \"svmd_accuracy\")\r\n        {\r\n            get_svmd_accuracy();\r\n            setSvmdAccuracy(true);\r\n        }\r\n        else if(e.target.name === \"deceptive_accuracies\")\r\n        {\r\n            get_deceptive_accuracies();\r\n            setDeceptiveAccuracies(true);\r\n        }\r\n\r\n    };\r\n\r\n    if(nbdAccuracy)\r\n        return <Redirect to='/nbd_accuracy' />;\r\n    else if(rfdAccuracy)\r\n        return <Redirect to='/rfd_accuracy' />;\r\n    else if(svmdAccuracy)\r\n        return <Redirect to='/svmd_accuracy' />;\r\n    else if(deceptiveAccuracies)\r\n        return <Redirect to='/accuracy_comparison' />;\r\n \r\n    if(isAuthenticated && is_admin)\r\n        return (\r\n            <div className=\"\">\r\n\r\n                <div className=\"container my-4\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-7 col-md-7\">\r\n                            <div className=\"shadow-sm p-3 bg-delicate rounded\">\r\n                                <h2 className=\"text-black-50\">{\"Welcome \" + email} &#127881;</h2>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"accuracy\">                    \r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-lg-12 col-md-12\">\r\n                                <h1 className=\"my-3\">Algorithm Accuracy</h1>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"container my-5\">   \r\n                        <div className=\"card shadow\">\r\n                            <div className=\"card-header bg-dark text-light rounded-radius-top\">\r\n                                <h4 className=\"fw-bold\"><i class=\"fas fa-chart-area\"></i> Accuracy Metrices</h4>\r\n                            </div>\r\n                            <div class=\"card-body\">\r\n                                <div className=\"row\">\r\n                            \r\n                                    <ButtonCard \r\n                                        Name=\"nbd_accuracy\" \r\n                                        bgColor='bg-endless-river' \r\n                                        iconName='far fa-chart-bar fa-lg'\r\n                                        iconColor='text-bright-blue'\r\n                                        onSubmit={e => onSubmit(e)} \r\n                                        value=\"NB Accuracy\"\r\n                                        text='Training & Testing'\r\n                                        count = {training_count + ' & ' + testing_count}\r\n                                        \r\n                                    />\r\n\r\n                                    <ButtonCard \r\n                                        Name=\"rfd_accuracy\" \r\n                                        bgColor='bg-mauve' \r\n                                        iconName='far fa-chart-bar fa-lg'\r\n                                        iconColor='text-dark-purple'\r\n                                        onSubmit={e => onSubmit(e)} \r\n                                        value=\"RF Accuracy\"\r\n                                        text='Training & Testing'\r\n                                        count = {training_count + ' & ' + testing_count}\r\n                                    />\r\n                                    \r\n                                    <ButtonCard \r\n                                        Name=\"svmd_accuracy\" \r\n                                        bgColor='bg-pizelex' \r\n                                        iconName='far fa-chart-bar fa-lg'\r\n                                        iconColor='text-dull-purple'\r\n                                        onSubmit={e => onSubmit(e)} \r\n                                        value=\"SVM Accuracy\"\r\n                                        text='Training & Testing'\r\n                                        count = {training_count + ' & ' + testing_count}\r\n                                    />\r\n                                    \r\n                                    <ButtonCard \r\n                                        Name=\"deceptive_accuracies\" \r\n                                        bgColor='bg-forest' \r\n                                        iconName='far fa-chart-bar fa-lg'\r\n                                        iconColor='text-light-brown'\r\n                                        onSubmit = {e => onSubmit(e)} \r\n                                        value=\"Accuracy Comparison\"\r\n                                        text='Training & Testing'\r\n                                        count = {'NB, RF & SVM'} \r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    else{\r\n        return (\r\n            <div>\r\n                <ForbiddenMessage />\r\n                <Sample/>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin,\r\n    email: state.profile.email,\r\n    training_count: state.profile.training_count,\r\n    testing_count: state.profile.testing_count\r\n}); \r\n\r\nexport default connect(mapStateToProps, {get_nbd_accuracy, get_rfd_accuracy, get_svmd_accuracy, get_deceptive_accuracies, get_data_counts})(AccuracyMetrices);","import React, {useEffect, useState} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { get_data_counts, get_t_deceptive_count, get_t_features, get_t_sentiment_count, get_users } from '../actions/profile';\r\nimport ButtonCard from './ButtonCard';\r\nimport ForbiddenMessage from './ForbiddenMessage';\r\nimport Sample from './sample';\r\n\r\nconst UserReviewAnalysis = ({isAuthenticated, is_admin, email, get_t_sentiment_count, get_t_deceptive_count, get_t_features, get_users, users_positive_count, users_neutral_count, users_negative_count, users_fake_count, users_genuine_count, get_data_counts}) => {\r\n\r\n    useEffect(() => {\r\n        get_data_counts();\r\n    }, [])\r\n    // Actual Reviews\r\n    const [tPosSuccess, setTPosSuccess] = useState(false);\r\n    const [tNeuSuccess, setTNeuSuccess] = useState(false);\r\n    const [tNegSuccess, setTNegSuccess] = useState(false);\r\n    const [tSentimentCount, setTSentimentCount] = useState(false);\r\n    const [tDeceptiveCount, setTDeceptiveCount] = useState(false);\r\n\r\n    // Users\r\n    const [users, setUsers] = useState(false)\r\n    \r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if(e.target.name === \"t_sentiment_count\")\r\n        {\r\n            get_t_sentiment_count();\r\n            setTSentimentCount(true);\r\n        }\r\n        else if(e.target.name === \"t_deceptive_count\")\r\n        {\r\n            get_t_deceptive_count();\r\n            setTDeceptiveCount(true);\r\n        }\r\n        else if(e.target.name === \"t_positive\" || e.target.name === \"t_negative\" || e.target.name === \"t_neutral\")\r\n        {\r\n            // Function all for actual data features\r\n            get_t_features(e.target.name);\r\n            if(e.target.name === \"t_positive\")\r\n                setTPosSuccess(true);\r\n            else if(e.target.name === \"t_negative\")\r\n                setTNegSuccess(true);\r\n            else if(e.target.name === \"t_neutral\")\r\n                setTNeuSuccess(true);\r\n        }\r\n        else if(e.target.name === \"users\")\r\n        {\r\n            get_users();\r\n            setUsers(true);\r\n        }\r\n    };\r\n\r\n    if(tPosSuccess)\r\n        return <Redirect to='/t_pos_features' />;\r\n    else if(tNegSuccess)\r\n        return <Redirect to='/t_neg_features' />;\r\n    else if(tNeuSuccess)\r\n        return <Redirect to='/t_neu_features' />;\r\n    else if(tSentimentCount)\r\n        return <Redirect to='/t_sentiment_count' />;\r\n    else if(tDeceptiveCount)\r\n        return <Redirect to='/t_deceptive_count' />;\r\n    else if(users)\r\n        return <Redirect to='/users' />;\r\n \r\n    if(isAuthenticated && is_admin)\r\n        return (\r\n            <div className=\"\">\r\n\r\n                <div className=\"container my-4\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-7 col-md-7\">\r\n                            <div className=\"shadow-sm p-3 bg-delicate rounded\">\r\n                                <h2 className=\"text-black-50\">{\"Welcome \" + email} &#127881;</h2>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"user-review-analysis\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-lg-12 col-md-12\">\r\n                                <h1 className=\"my-3\">User Review Analysis</h1>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"container my-5\">   \r\n                        <div className=\"card shadow\">\r\n                            <div className=\"card-header bg-dark text-light rounded-radius-top\">\r\n                                <h4 className=\"fw-bold\"><i class=\"fas fa-icons\"></i> Feature Extraction</h4>\r\n                            </div>\r\n                            <div class=\"card-body\">\r\n                                <div className=\"row\">\r\n                                    \r\n                                    <ButtonCard \r\n                                        Name=\"t_positive\" \r\n                                        bgColor='bg-premium-dark' \r\n                                        iconName='far fa-smile-beam fa-lg'\r\n                                        iconColor='text-success'\r\n                                        onSubmit={e => onSubmit(e)} \r\n                                        value=\"Positive Features\"\r\n                                        text=\"User Reviews\"\r\n                                        count = {users_positive_count}\r\n                                    />\r\n\r\n                                    <ButtonCard \r\n                                        Name=\"t_neutral\" \r\n                                        bgColor='bg-midnight-bloom' \r\n                                        iconName='far fa-meh-rolling-eyes fa-lg'\r\n                                        iconColor='text-bright-blue'\r\n                                        onSubmit={e => onSubmit(e)} \r\n                                        value=\"Neutral Features\"\r\n                                        text=\"User Reviews\"\r\n                                        count= {users_neutral_count}\r\n                                    />\r\n                                    <ButtonCard \r\n                                        Name=\"t_negative\" \r\n                                        bgColor='bg-lost-memory' \r\n                                        iconName='far fa-frown fa-lg'\r\n                                        iconColor='text-orange'\r\n                                        onSubmit={e => onSubmit(e)} \r\n                                        value=\"Negative Features\"\r\n                                        text=\"User Reviews\"\r\n                                        count={users_negative_count}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"container my-5\">   \r\n                        <div className=\"card shadow\">\r\n                            <div className=\"card-header bg-dark text-light rounded-radius-top\">\r\n                                <h4 className=\"fw-bold\"><i class=\"fas fa-chart-line\"></i> Classification Report</h4>\r\n                            </div>\r\n                            <div class=\"card-body\">\r\n                                <div className=\"row\">\r\n                                    <ButtonCard \r\n                                        Name=\"t_deceptive_count\" \r\n                                        bgColor='bg-plum-plate' \r\n                                        iconName='fas fa-chart-pie fa-lg' \r\n                                        iconColor='text-dark-primary' \r\n                                        onSubmit={e => onSubmit(e)} \r\n                                        value=\"Deceptive Count\"\r\n                                        text=\"User Reviews\"\r\n                                        count={users_fake_count + users_genuine_count}\r\n                                    />\r\n\r\n                                    <ButtonCard \r\n                                        Name=\"t_sentiment_count\" \r\n                                        bgColor='bg-roseanna' \r\n                                        iconName='fas fa-chart-pie fa-lg' \r\n                                        iconColor='text-light-pink' \r\n                                        onSubmit={e => onSubmit(e)} \r\n                                        value=\"Sentiment Count\"\r\n                                        text=\"User Reviews\"\r\n                                        count={users_positive_count + users_neutral_count + users_negative_count}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"container my-5\">   \r\n                        <div className=\"card shadow\">\r\n                            <div className=\"card-header bg-dark text-light rounded-radius-top\">\r\n                                <h4 className=\"fw-bold\"><i class=\"fas fa-database\"></i> Users Data</h4>\r\n                            </div>\r\n                            <div class=\"card-body\">\r\n                                <div className=\"row\">\r\n                                    <ButtonCard \r\n                                        Name=\"users\" \r\n                                        bgColor='bg-mauve' \r\n                                        iconName='fas fa-users fa-lg'\r\n                                        iconColor='text-dark-purple'\r\n                                        onSubmit = {e => onSubmit(e)} \r\n                                        value=\"Users Reviews\" \r\n                                        text=\"User Reviews\"\r\n                                        count={users_fake_count + users_genuine_count}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    else{\r\n        return (\r\n            <div>\r\n                <ForbiddenMessage />\r\n                <Sample/>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    is_admin: state.auth.is_admin,\r\n    email: state.profile.email,\r\n    users_positive_count: state.profile.users_positive_count,\r\n    users_neutral_count: state.profile.users_neutral_count,\r\n    users_negative_count: state.profile.users_negative_count,\r\n    users_fake_count: state.profile.users_fake_count,\r\n    users_genuine_count: state.profile.users_genuine_count,\r\n}); \r\n\r\nexport default connect(mapStateToProps, { get_t_sentiment_count, get_t_deceptive_count, get_t_features, get_users, get_data_counts})(UserReviewAnalysis);","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Login from './containers/Login';\nimport Register from './containers/Register';\nimport Home  from './containers/Home';\nimport Layout from './hocs/Layout';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Dashboard from './containers/Dashboard';\nimport AdminDashboard from './containers/AdminDasboard';\nimport PosFeatures from './containers/PosFeatures';\nimport NegFeatures from './containers/NegFeatures';\nimport NeuFeatures from './containers/NeuFeatures';\nimport SentimentCount from './containers/SentimentCount';\nimport DeceptiveCount from './containers/DeceptiveCount';\nimport TSentimentCount from './containers/TSentimentCount';\nimport TDeceptiveCount from './containers/TDeceptiveCount';\nimport TPosFeatures from './containers/TPosFeatures';\nimport TNeuFeatures from './containers/TNeuFeatures';\nimport TNegFeatures from './containers/TNegFeatures';\nimport NBDAccuracy from './containers/NBDAccuracy';\nimport SVMDAccuracy from './containers/SVMDAccuracy';\nimport RFDAccuracy from './containers/RFDAccuracy';\nimport AccuracyComparison from './containers/AccuracyComparison';\nimport UserReviews from './containers/UserReviews';\nimport AccuracyMetrices from './containers/AccuracyMetrices';\nimport UserReviewAnalysis from './containers/UserReviewAnalysis';\n\nconst App = () => {\n  return (\n    <Provider store = {store}>\n      <Router>\n        <Layout>\n          <Route exact path=\"/\" component = {Home} />\n          <Route exact path=\"/login\" component = {Login} />\n          <Route exact path=\"/register\" component = {Register} />\n          <Route exact path=\"/dashboard\" component = { Dashboard } />\n          <Route exact path=\"/admindashboard\" component = {AdminDashboard} />\n          <Route exact path=\"/pos_features\" component = {PosFeatures} /> \n          <Route exact path=\"/neu_features\" component = {NeuFeatures} /> \n          <Route exact path=\"/neg_features\" component = {NegFeatures} /> \n          <Route exact path=\"/sentiment_count\" component = {SentimentCount} /> \n          <Route exact path=\"/deceptive_count\" component = {DeceptiveCount} /> \n          <Route exact path=\"/t_pos_features\" component = {TPosFeatures} /> \n          <Route exact path=\"/t_neu_features\" component = {TNeuFeatures} /> \n          <Route exact path=\"/t_neg_features\" component = {TNegFeatures} /> \n          <Route exact path=\"/t_sentiment_count\" component = {TSentimentCount} />\n          <Route exact path=\"/t_deceptive_count\" component = {TDeceptiveCount} />\n          <Route exact path=\"/nbd_accuracy\" component = {NBDAccuracy} />\n          <Route exact path=\"/rfd_accuracy\" component = {RFDAccuracy} />\n          <Route exact path=\"/svmd_accuracy\" component = {SVMDAccuracy} />\n          <Route exact path='/accuracy_comparison' component ={AccuracyComparison} />\n          <Route exact path='/users' component = {UserReviews} />\n          <Route exact path='/accuracy_metrices' component={AccuracyMetrices} />\n          <Route exact path='/review_analysis' component={UserReviewAnalysis} />\n        </Layout>\n      </Router>\n    </Provider> \n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}